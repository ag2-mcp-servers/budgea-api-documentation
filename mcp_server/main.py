# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T17:09:10+00:00



import argparse
import json
import os
from datetime import date as date_aliased
from datetime import datetime
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Path, UploadFile

from models import (
    Account,
    AccountType,
    AccountTypesGetResponse,
    AdminJwtPostResponse,
    AuthInitPostResponse,
    AuthJwtPostResponse,
    AuthProvider,
    AuthRenewPostResponse,
    AuthTokenAccessPostResponse,
    AuthTokenCodeGetResponse,
    AuthTokenPostResponse,
    BanksGetResponse,
    BanksIdConnectorConnectionsGetResponse,
    BanksIdConnectorLogosGetResponse,
    BanksIdConnectorLogosMainGetResponse,
    BanksIdConnectorLogosThumbnailGetResponse,
    BanksIdConnectorSourcesGetResponse,
    BanksIdConnectorSourcesIdConnectorSourceFieldsGetResponse,
    CategoriesGetResponse,
    CategorizePostResponse,
    Category,
    Certificate,
    Client,
    ClientsGetResponse,
    ConfigLogsGetResponse,
    Connection,
    ConnectionsGetResponse,
    ConnectionsIdConnectionLogsGetResponse,
    ConnectionsIdConnectionSourcesGetResponse,
    ConnectionSource,
    Connector,
    ConnectorCategory,
    ConnectorLogo,
    ConnectorsGetResponse,
    ConnectorsIdConnectorLogosGetResponse,
    ConnectorsIdConnectorLogosMainGetResponse,
    ConnectorsIdConnectorLogosThumbnailGetResponse,
    ConnectorsIdConnectorSourcesGetResponse,
    ConnectorsIdConnectorSourcesIdConnectorSourceFieldsGetResponse,
    ConnectorSource,
    File,
    Keyword,
    LogsGetResponse,
    Profile,
    ProvidersGetResponse,
    ProvidersIdConnectorConnectionsGetResponse,
    ProvidersIdConnectorLogosGetResponse,
    ProvidersIdConnectorLogosMainGetResponse,
    ProvidersIdConnectorLogosThumbnailGetResponse,
    ProvidersIdConnectorSourcesGetResponse,
    ProvidersIdConnectorSourcesIdConnectorSourceFieldsGetResponse,
    Psd2Registration,
    Psd2RegistrationsGetResponse,
    Psd2RegistrationsIdPsd2registrationLogsGetResponse,
    Transaction,
    TransactionInformation,
    TransactionsCluster,
    User,
    UsersGetResponse,
    UsersIdUserAccountsIdAccountTransactionsclustersGetResponse,
    UsersIdUserAccountTypesGetResponse,
    UsersIdUserAlertsGetResponse,
    UsersIdUserCategoriesFullGetResponse,
    UsersIdUserConfigGetResponse,
    UsersIdUserConnectionsGetResponse,
    UsersIdUserConnectionsIdConnectionAccountsGetResponse,
    UsersIdUserConnectionsIdConnectionAccountsIdAccountLogsGetResponse,
    UsersIdUserConnectionsIdConnectionAccountsIdAccountSourcesGetResponse,
    UsersIdUserConnectionsIdConnectionAccountsIdAccountTransactionsclustersGetResponse,
    UsersIdUserConnectionsIdConnectionAccountsIdAccountTransactionsGetResponse,
    UsersIdUserConnectionsIdConnectionAccountsIdAccountTransactionsIdTransactionInformationsGetResponse,
    UsersIdUserConnectionsIdConnectionInformationsGetResponse,
    UsersIdUserConnectionsIdConnectionLogsGetResponse,
    UsersIdUserConnectionsIdConnectionSourcesGetResponse,
    UsersIdUserConnectionsIdConnectionTransactionsclustersGetResponse,
    UsersIdUserLogsGetResponse,
    UsersIdUserProfilesGetResponse,
    UsersIdUserTokenPostResponse,
    UsersIdUserTransactionsclustersGetResponse,
    Webhook,
    WebhooksAuthGetResponse,
    WebhooksGetResponse,
    WebhooksIdWebhookAddToDataGetResponse,
    WebhooksIdWebhookLogsGetResponse,
)

app = MCPProxy(
    description='# Budgea Development Guides\n\nWelcome to **Budgea**\'s documentation.\n\nThis documentation is intended to get you up-and-running with our APIs and advise on the implementation of some regulatory aspects of your application, following the DSP2\'s guidelines.\n\n## Getting Started\n**IMPORTANT**\nDepending on your status with regard of the DSP2 regulation, **agent** or **partner**, you may call our APIs or simply use our Webview and callbacks to get the financial data of your users.\nAs an **agent**, you are allowed to call directly our APIs and implement your own form to get the user\'s credentials.\nAs a **partner**, you cannot manipulate the credentials, and have to delegate this step to us through our webview.\n\nThe sections below will document how to use our APIs, make sure you have the **agent** status to do so.\nFor the **partner**, please refer to the section *Webview* and *Callbacks* of this documentation.\n\n### Overview\nYour API is a REST API which requires a communication through https to send and receive JSON documents.\nDuring your tests, we recommend to make calls to the API with curl or any other HTTP client of your choice.\nYou can watch a video demonstration on this [URL](https://asciinema.org/a/FsaFyt3WAPyDm7sfaZPkwal3V).\nFor the examples we\'ll use the demo API with address `https://demo.biapi.pro`, you should change that name to your API\'s name.\n\n### Hello World\nLet\'s start by calling the service `/banks` which lists all available banks.\n```\ncurl https://demo.biapi.pro/2.0/banks/\n```\nTo log in to a bank webpage, you\'ll need to know for a given bank, the fields your user should fill in the form.\nLet\'s call a  specific bank and ask for an additional resource *fields*.\n```\ncurl https://demo.biapi.pro/2.0/banks/59?expand=fields\n```\nThe response here concerns only 1 bank (since we specified an id) and the resource _Fields_ is added to the response thanks to the query parameter `expand`.\n\nTo get more interesting things done, you\'ll need to send authenticated requests.\n\n### Authentication\nThe way to authenticate is by passing the `Authorization: Bearer <token>` header in your request.\nAt the setup a _manage token_ have been generated, you can use this token for now, when creating your user we\'ll see how to generate a user\'s token.\n```\ncurl https://demo.biapi.pro/2.0/config \\\n  -H \'Authorization: Bearer <token>\'\n```\nThis endpoint will list all the parameters you can change to adapt Budgea to your needs.\n\nWe\'ve covered the very first calls. Before diving deeper, let\'s see some general information about the APIs.\n\n## Abstract\n\n### API URL\n`https://demo.biapi.pro/2.0`\n\n### Requests format\nData format: **application/x-www-form-urlencoded** or **application/json** (suggested)\n\nAdditional headers: Authorization: User\'s token (private)\n\n### Responses format\nData format: **application/json** ([http://www.json.org](http://www.json.org/))\nCharset: **UTF-8**\n\n### Resources\nEach call on an endpoint will return resources. The main resources are:\n| Resource            | Description                                                                                                           |\n| ---------------------|:------------------------------------------------------------------------------------------------------------------   |\n|Users                 |Represent a user                                                                                                      |\n|Connection            |A set of data used to authenticate on a website (usually a login and password). There is 1 connection for each website|\n|Account               |A bank account contained in a connection                                                                              |\n|Transaction           |An entry in a bank account                                                                                            |\n|Investment            |An asset in a bank account                                                                                            |\n\nThe chain of resources is as follow: **Users ∈ Connections ∈ Accounts ∈ Transactions or Investments**\n\n### RESTful API\n\nThis API is RESTful, which means it is stateless and each resource is accessed with an unique URI.\n\nSeveral HTTP methods are available:\n\n| Method                  | Description                    |\n| ------------------------|:-------------------------------|\n| GET /resources          | List resources                 |\n| GET /resources/{ID}     | Get a resource from its ID     |\n| POST /resources         | Create a new resource          |\n| POST /resources/{ID}    | Update a resource              |\n| PUT /resources  /{ID}   | Update a resource              |\n| DELETE /resources       | Remove every resources         |\n| DELETE /resources/{ID}  | Delete a resource              |\n\n\nEach resource can contain sub-resources, for example:\n`/users/me/connections/2/accounts/23/transactions/48`\n\n### HTTP response codes\n\n| Code        | Message               | Description                                                                                   |\n| ----------- |:---------------------:|-----------------------------------------------------------------------------------------------|\n| 200         | OK                    |Default response when a GET or POST request has succeed                                        |\n| 202         | Accepted              |For a new connection this code means it is necessary to provide complementary information (2FA)|\n| 204         | No content            |Default response when a POST request succeed without content                                   |\n| 400         | Bad request           |Supplied parameters are incorrect                                                              |\n| 403         | Forbidden             |Invalid token                                                                                  |\n| 500         | Internal Servor Error |Server error                                                                                   |\n| 503         | Service Unavailable   |Service is temporarily unavailable                                                             |\n\n### Errors management\nIn case an error occurs (code 4xx or 5xx), the response can contain a JSON object describing this error:\n```json\n{\n   "code": "authFailure",\n   "message": "Wrong password"  // Optional\n}\n```\nIf an error is displayed on the website, Its content is returned in error_message field.\nThe list of all possible errors is listed further down this page.\n\n### Authentication\nA user is authenticated by an access_token which is sent by the API during a call on one of the authentication services, and can be supplied with this header:\n`Authorization: Bearer YYYYYYYYYYYYYYYYYYYYYYYYYYY`\n\n There are two user levels:\n\n    - Normal user, which can only access to his own accounts\n    - Administrator, with extended rights\n\n### Default filters\nDuring a call to an URI which lists resources, some filters can be passed as query parameters:\n\n| Parameter   | Type      | Description                                               |\n| ----------- |:---------:|-----------------------------------------------------------|\n| offset      | Integer   |Offset of the first returned resource                      |\n| limit       | Integer   |Limit number of results                                    |\n| min_date    | Date      |Minimal date (if supported by service), format: YYYY-MM-DD |\n| max_date    | Date      |Maximal date (if supported by service), format: YYYY-MM-DD |\n\n### Extend requests\nDuring a GET on a set of resources or on a unique resource, it is possible to add a parameter expand to the request to extend relations with other resources:\n\n`GET /2.0/users/me/accounts/123?expand=transactions[category],connection`\n\n```json\n{\n   "id" : 123\n   "name" : "Compte chèque"\n   "balance" : 1561.15\n   "transactions" : [\n      {\n         "id" : 9849,\n         "simplified_wording" : "HALL\'S BEER",\n         "value" : -513.20,\n         ...\n         "category" : {\n            "id" : 561,\n            "name" : "Sorties / Bar",\n            ...\n         }\n       },\n       ...\n   ],\n   "id_user" : 1,\n   "connection" : {\n      "id" : 1518,\n      "id_bank" : 41,\n      "id_user" : 1,\n      "error" : null,\n      ...\n   }\n}\n```\n\n### Request example\n```http\nGET /2.0/banks?offset=0&limit=10&expand=fields\nHost: demo.biapi.pro\nAccept: application/json\nAuthorization: Bearer <token>\n```\n```http\nHTTP/1.1 200 OK\nContent-Type: application/json\nContent-Length: 3026\nServer: Apache\nDate: Fri, 14 Mar 2014 08:24:02 GMT\n\n{\n   "banks" : [\n      {\n         "id_weboob" : "bnp",\n         "name" : "BNP Paribas",\n         "id" : 3,\n         "hidden" : false,\n         "fields" : [\n            {\n               "id" : 1,\n               "id_bank" : 3,\n               "regex" : "^[0-9]{5,10}$",\n               "name" : "login",\n               "type" : "text",\n               "label" : "Numéro client"\n            },\n            {\n               "id" : 2,\n               "id_bank" : 3,\n               "regex" : "^[0-9]{6}$",\n               "name" : "password",\n               "type" : "password",\n               "label" : "Code secret"\n            }\n         ]\n      },\n      ...\n   ]\n   "total" : 41\n}\n```\n\n### Constants\n#### List of bank account types\n| Type          |Description                        |\n| -----------   |-----------------------------------|\n| checking      |Checking account                   |\n| savings       |Savings account                    |\n| deposit       |Deposit accounts                   |\n| loan          |Loan                               |\n| market        | Market accounts                   |\n| joint         |Joint account                      |\n| card          |Card                               |\n| lifeinsurance |Life insurance accounts            |\n| pee           |Plan Épargne Entreprise            |\n| perco         |Plan Épargne Retraite              |\n| article83     |Article 83                         |\n| rsp           |Réserve spéciale de participation  |\n| pea           |Plan d\'épargne en actions          |\n| capitalisation|Contrat de capitalisation          |\n| perp          |Plan d\'épargne retraite populaire  |\n| madelin       |Contrat retraite Madelin           |\n| unknown       |Inconnu                            |\n\n#### List of transaction types\n\n| Type         |Description                        |\n| -----------  |-----------------------------------|\n|transfer      |Transfers                          |\n|order         |Orders                             |\n|check         |Checks                             |\n|deposit       |Cash deposit                       |\n|payback       |Payback                            |\n|withdrawal    |Withdrawal                         |\n|loan_payment  |Loan payment                       |\n|bank          |Bank fees                          |\n|card          |Card operation                     |\n|deferred_card |Deferred card operation            |\n|card_summary  |Mensual debit of a deferred card   |\n\n#### List of synchronization errors\n##### Error on Connection object\nThe error field may take one of the below values in case of error when accessing the user space.\n\n| Error                      |Description                                                                                       |\n| -----------------------    |--------------------------------------------------------------------------------------------------|\n|wrongpass                   |The authentication on website has failed                                                          |\n|additionalInformationNeeded |Additional information is needed such as an OTP                                                  |\n|websiteUnavailable          |The website is unavailable, for instance we get a HTTP 503 response when requesting the website   |\n|actionNeeded                |An action is needed on the website by the user, scraping is blocked                               |\n|SCARequired                |An SCA process must be done by updating the connection                               |\n|decoupled                  |Requires a user validation (ex: digital key)|\n|passwordExpired                   |The password has expired and needs to be changed on the website.                                                         |\n|webauthRequired                |A complete authentication process is required by update the connection via redirect                            |\n|bug                         |A bug has occurred during the synchronization. An alert has been sent to Budget Insight           |\n\n#### Error on Account object\nErrors can be filled at the account level in case we access the user\'s dashboard but some account related data cannot be retrieved.\nFor instance, we may not access the transactions or investments for a specific account.\nGetting an error during an account synchronization does not impact the scraping of other acccounts.\n\n| Error                      |Description                                                                                       |\n| -----------------------    |--------------------------------------------------------------------------------------------------|\n|websiteUnavailable          |The website or a page is unavailable                                                              |\n|actionNeeded                |An action is needed on the website by the user, scraping is blocked                               |\n|bug                         |A bug has occurred during the synchronization. An alert has been sent to Budget Insight           |\n\nNow you know the basics of Budgea API\n- Basic call to retrieve resources\n- Add query parameters to aplly filters\n- Expand resources\n- Authenticated calls\n\nWe\'re good for the basics! Now let\'s see how to integrate Budgea in your app and create your first user.\n\n## Integrate Budgea *(protocol or Webview)*\n### The workflow\nUsers of your application exist in the Budgea API.\nEvery User is identified by an access_token which is the shared secret between your application and our API.\n\nThe workflow is as below:\n1. The user is on your application and wants to share his bank accounts or invoices.\n2. A call is made **client side** (browser\'s javascript or desktop application) to create a temporarily token which will be used to make API calls.\n3. A form is built, allowing the user to select the connector to use (bank or provider, depending on context). Every connector requires different kind of credentials.\n4. A call on the API is made with the temporarily token to add a **Connection** with the credentials supplied by user.\n5. In case of success, the user chooses what bank accounts (**Account**) or subscriptions (**Subscription**) he wants to share with your application.\n6. When he validates the share, the temporarily token is transmitted to your server. This one will call the Budgea API with this token to get a permanent token.\n\n**Note**\nIn case your application works without a server (for example a desktop application), the permanent token can be obtained on the 1st step, by supplying a client_secret to /auth/init and the step 6 is omitted. To get more information, read the protocol.\n\nThere are 3 steps to integrate Budgea in your application:\n1. Provide a way for your users to share their credentials with you\n2. Get the data scraped from Budgea\n3. Be sure to follow the good practices before going into production\n\n### Get credentials from users\nYou have 2 options here:\n- Integrate the Budget Insight\'s Webview, a turnkey solution to get user\'s credentials\n- Create your own form following the protocol (must have the *agent* status)\n\n### Budgea webview\n\nThe Budgea webview complements REST API endpoints with web-based services to handle sensitive or complex operations:\n- add a connection (to a bank or a provider), or edit/repare access to a connection;\n- manage connections (add/remove/edit);\n- edit and validate bank transfers (alpha preview).\n\nUsage of the webview is mandatory if you don\'t hold an Agent status, since you are not allowed to use API endpoints carrying user credentials, and optional otherwise.\n\n#### Implementation guidelines\n\n##### Base URL\n\nThe base URL of all services must be customized:  \n`https://{{domain}}.biapi.pro/2.0/auth/webview/`  \n`https://{{domain}}.biapi.pro/2.0/auth/webview/{{lang}}/`  \n- `{{domain}}`: substitute with you API domain;\n- `{{lang}}`: optionally specify the language of the webview, `en` or `fr` (if not specified, an automatic redirection will be performed following the language of the browser).\n\n##### Browser integration\n\nServices available as part of the webview are designed as parameterized URLs intended to be opened in a web browser. A callback URI must be specified by callers to be notified at the end of the operation flow, similar to OAuth 2 specification.\n\nYou are encouraged to integrate web-based steps in your product following UX best practices:\n- in a web environment, perform a full-page redirect to the URL (using either [HTTP redirect](https://developer.mozilla.org/fr/docs/Web/HTTP/Status/302) or [scripting](https://developer.mozilla.org/fr/docs/Web/API/Location)), and avoid new tabs or popups;\n- in a native Android app, prefer opening the default browser or relying on [Chrome Custom Tabs](https://developer.chrome.com/multidevice/android/customtabs) to integrating a WebView;\n- in a native iOS app, prefer using a [SFSafariViewController](https://developer.apple.com/documentation/safariservices/sfsafariviewcontroller) to integrating a WKWebView.\n\n##### Callback handling\n\nMost flows redirect to a callback URI at the end of the process. Query parameters are added to the URI to identify successful or failed operations.\n\nSuccessful parameters are specific to each flow. In case of an error, the following parameters are added:\n\n| Parameter | Description |\n| - | - |\n| `error` | An lowercase string error code identifying the kind of error that occurred. When the parameter is not present, the response is successful. |\n| `error_description` | A longer string description of the error (not intended for user display). |\n\nCommon error codes include:\n\n| Code | Description |\n| - | - |\n| `access_denied` | The user explicitly cancelled the flow. |\n| `server_error` | Oops, a technical failure occurred during the process. |\n\n**Forward compatibility requirement**: Additional error codes may be added in the future to describe specific cases. When implementing error codes handling, always fallback to a generic case for unknown codes.\n\n##### Browser compatibility\n\nThe webview is designed and tested to work with browsers supported by the Angular framework:  \nhttps://angular.io/guide/browser-support\n\n##### Privacy / GDPR status\n\nThe webview itself does not use any kind of long-term data persistence mechanism such as cookies or local storage, but some authentication or authorization steps may delegate to third-party web services that may implement them.\n\n#### Configuration\n\nYou can configure the appearance and behaviour of the webview by configuring the associated *Client Application* in the console:\n\n| Key | Format | Description |\n| - | - | - |\n| `primary_color` | String | Optional. An accent color (hexadecimal string without \'#\' prefix) to personalize the UI elements of the webview. If absent, the default color is grey. |\n| `redirect_uri` | String | Optional. A recommended security whitelist configuration. The `redirect_uri` parameter sent to any endpoint of the webview is checked against the configuration, if any. |\n| `config.disable_connector_hints` | Boolean | Optional. This flags hides the list of most-used entries in the connector selection step. The default is `false`, i.e. the list is shown. |\n| `config.use_app_layout` | Boolean | Optional. Use this flag to enable presenting your log as an app icon. The default value is ` false`, i.e. the logo is shown in the top bar of the UI. |\n| `config.disable_accounts_pre_check` | Boolean | Optional. An optional boolean flag to prevent bank accounts to be automatically pre-checked when the user enters the activation step. The default value is ` false`, i.e. the bank accounts are pre-checked. |\n\n#### Endpoints reference\n\n##### Add connection flow\n```\nhttps://{{domain}}.biapi.pro/2.0/auth/webview/{{lang}}/connect\n```\n\nThis flow allows an end-user to add a new connection to the API. The flow handles the following steps:\n- selecting a connector;\n- authenticating & authorizing with the connector, by collecting credentials or delegating;\n- managing consent to aggregate accounts/subscriptions;\n- collecting required information for professional accounts.\n\n###### Endpoint parameters\n\n| Parameter | Description |\n| - | - |\n| `client_id` | Required. The ID of the requesting client application. You can manage client applications of your domain in the admin console. |\n| `redirect_uri` | Required. An absolute callback URI. The webview will redirect to it at the end of the flow. |\n| `code` | Optional. A user-scoped temporary code to use with the Budgea API.<br>If you don\'t provide a code, a new anonymous user will be created before the connection is added, and you will be returned an access token code scoped to it with the success callback. |\n| `state` | Optional. An opaque string parameter that you can use to carry state across the flow. The parameter will be set "as is" on the callback URI. Make sure that the `state` you provide is properly URL-encoded. |\n| `connector_ids` | Optional. A comma-separated list of connector IDs available to pick from.<br>If the parameter is omitted, all active connectors are available.<br>If you pass a single value, the user is not prompted to choose the connector.<br>This parameter is mutually exclusive with `connector_uuids`. |\n| `connector_uuids` | Optional. A comma-separated list of connector UUIDs available to pick from.<br>If the parameter is omitted, all active connectors are available.<br>If you pass a single value, the user is not prompted to choose the connector.<br>This parameter is mutually exclusive with `connector_ids`. |\n| `connector_capabilities` | Optional. A comma-separated list of capabilities to filter available connectors.<br>If the parameter is omitted, `bank` is inferred.<br>If multiple values are provided, only connectors that expose all the requested capabilities are available.<br>To request a bank connection, use `bank`.<br>To request a provider connection, use `document`. |\n| `account_ibans` | Optional. A comma-separated list of IBANs to filter accounts available for activation in a bank connection context. Other accounts will not be selectable. |\n| `account_types` | Optional. A comma-separated list of account types to filter accounts available for activation in a bank connection context. Other accounts will not be selectable. |\n| `account_usages` | Optional. A comma-separated list of account usages to filter accounts available for activation in a bank connection context. Other accounts will not be selectable. |\n\n###### Successful callback parameters\n\n| Parameter | Description |\n| - | - |\n| `connection_id` | The id of the newly created connection. Please note that when redirecting to the callback URI, the accounts and/or subscriptions are available in the API, but bank transactions or documents may still be syncing in background. |\n| `code` | Optional. If a `code` was *not* initially specified, an API code that you must exchange to obtain a permanent access token associated with the newly-created anonymous user holding the connection. The parameter is URL-encoded, make sure to handle it accordingly. |\n| `state` | Optional. Identical to the `state` parameter that was initially specified. |\n\n###### Additional error codes\n\n| Code | Description |\n| - | - |\n| `tos_declined` | The end-user refused to validate the terms of service. |\n\n##### Re-auth / edit connection credentials flow\n\n```\nhttps://{{domain}}.biapi.pro/2.0/auth/webview/{{lang}}/reconnect\n```\n\nThis flow allows an end-user to re-authenticate against a bank or a provider in order to recover an existing connection, or to completely reset credentials associated with a connection.\n\n###### Endpoint parameters\n\n| Parameter | Description |\n| - | - |\n| `client_id` | Required. The ID of the requesting client application. You can manage client applications of your domain in the admin console. |\n| `redirect_uri` | Required. An absolute callback URI. The webview will redirect to it at the end of the flow. |\n| `code` | Required. A user-scoped temporary code to use with the Budgea API. |\n| `connection_id` | Required. The id of the existing connection. |\n| `state` | Optional. An opaque string parameter that you can use to carry state across the flow. The parameter will be set "as is" on the callback URI. Make sure that the `state` you provide is properly URL-encoded. |\n| `reset_credentials` | Optional. In the default mode (`false`), the service will try to recover the connection and prompt the user only with outdated or transient information (new password, OTP...).<br>Set the parameter to `true` to force resetting all the credentials associated with the connection. This parameter may not apply to all connectors. |\n\n###### Successful callback parameters\n\nThis flow adds no parameter to the callback URI in case of success, except from `state`.\n\n##### Manage connections\n\n```\nhttps://{{domain}}.biapi.pro/2.0/auth/webview/{{lang}}/manage\n```\nThis flow allows an end-user to manage the connections associated with his account in the API. The user can add new connections, remove existing ones, fix connection errors, reset credentials or activate/deactivate bank accounts.\n\nSupport of `redirect_uri` in this flow is optional, as it can be integrated or presented as a terminal step, without relying on a final redirection.\n\n###### Endpoint parameters\n\n| Parameter | Description |\n| - | - |\n| `client_id` | Required. The ID of the requesting client application. You can manage client applications of your domain in the admin console. |\n| `code` | Required. A user-scoped temporary code to use with the Budgea API. |\n| `redirect_uri` | Optional. An absolute callback URI. When provided, the webview will display a close button that redirects to it. |\n| `state` | Optional. An opaque string parameter that you can use to carry state across the flow when providing a `redirect_uri`. The parameter will be set "as is" on the callback URI. Make sure that the `state` you provide is properly URL-encoded. |\n| `connector_capabilities` | Optional. A comma-separated list of capabilities to filter available connectors when adding a new connection.<br>If the parameter is omitted, `bank` is inferred.<br>If multiple values are provided, only connectors that expose all the requested capabilities are available.<br>To request a bank connection, use `bank`.<br>To request a provider connection, use `document`. |\n| `account_types` | Optional. A comma-separated list of account types to filter accounts available for activation on adding a new bank connection or updating existing connections. Other accounts will not be selectable. |\n| `account_usages` | Optional. A comma-separated list of account usages to filter accounts available for activation in a bank connection context. Other accounts will not be selectable. |\n\n###### Callback parameters\n\nThis flow adds no parameter to the callback URI, except from `state`.\n\n##### Execute a bank transfer (preview)\n\n**Disclaimer**: Transfer or payment services are available as a preview, protocols and parameters are subject to change in upcoming beta/final releases.\n\n```\nhttps://{{domain}}.biapi.pro/2.0/auth/webview/{{lang}}/transfer\n```\nThis flow allows an end-user to execute a bank transfer. The flow handles the following steps:\n- if the transfer is not already created, all steps to authenticate with a bank, select the recipient, the emitter account, the amount and label;\n- executing the transfer, including managing SCAs for recipient registration and/or transfer validation.\n\n###### Endpoint parameters\n\n| Parameter | Description |\n| - | - |\n| `client_id` | Required. The ID of the requesting client application. You can manage client applications of your domain in the admin console. |\n| `redirect_uri` | Required. An absolute callback URI. The webview will redirect to it at the end of the flow. |\n| `code` | Required. A user-scoped temporary code to use with the Budgea API.<br>If you don\'t provide a code, a new anonymous user will be created before a connection is added and the transfer is executed, and you will be returned an access token code scoped to it with the success callback. |\n| `state` | Optional. An opaque string parameter that you can use to carry state across the flow. The parameter will be set "as is" on the callback URI. Make sure that the `state` you provide is properly URL-encoded. |\n| `transfer_id`| Optional. The ID of an prepared transfer to be validated in the webview. The user cannot edit anything on the transfer before validation. |\n\n###### Successfull callback parameters\n\n| Parameter | Description |\n| - | - |\n| `transfer_id` | The ID of the transfer that was created and executed. |\n| `code` | Optional. If a `code` was *not* initially specified, an API code that you can exchange to obtain a permanent access token associated with the newly-created anonymous user holding the transfer. The parameter is URL-encoded, make sure to handle it accordingly. |\n| `state` | Optional. Identical to the `state` parameter that was initially specified. |\n\n###### Additional error codes\n\n| Code | Description |\n| - | - |\n| `tos_declined` | The end-user refused to validate the terms of service. |\n\n#### Migrating from v3\n\nWe provide a full backward compatibility layer with current implementations of the webview v3 to ease the transition. All endpoints remains accessible, with the same parameters and callback behaviour. Migration instructions are provided below.\n\n*The v3 compatibility mode is expected to be removed on 31 December 2019.* You should migrate your implementation a soon as possible to new endpoints and parameters.\n\n##### Add connection flow / Edit connection credentials  \n```\n/connect/select\n```\n\nThis endpoint has been superseded by `/connect` (no suffix) for adding a new connection, and `/reconnect` for resetting or updating an existing connection.\n\n| Endpoint parameter | Migration instructions |\n| - | - |\n| `client_id` | No change. |\n| `redirect_uri`, `state` | No change. |\n| `response_type` | This parameter is not used anymore. |\n| `id_connector`, `connectors` | Superseded by `connector_ids` sent to the `/connect` endpoint. |\n| `types` | Superseded by `connector_capabilities` sent to the `/connect` endpoint.<br>Use`connector_capabilities=bank` (bank connection) or `connector_capabilities=document` (provider connection). |\n| `id_connection` | Superseded by `connection_id` sent to the `/reconnect` endpoint. |\n\nPassing the code or access token as an URL fragment is no longer supported, use the `code` query parameter.\n\n| Callback parameter | Migration instructions |\n| - | - |\n| `id_connection` | Superseded by `connection_id`.<br>In the `/reconnect` flow, this parameter is not returned anymore. |\n| `code` | Still named `code`, but in the `/connect` flow the parameter is now **only** added if an anonymous user was created, i.e. the `code` parameter was **not** provided as a query parameter or fragment.<br>In the `/reconnect` flow, this parameter is not returned anymore. |\n| `state` | No change. |\n\n##### Manage connections\n\n```\n/accounts\n```\n\nThis endpoint has been superseded by `/manage`, that now fully allows users to add/remove connections, reset their credentials or recover from error states.\n\n| Endpoint parameter | Migration instructions |\n| - | - |\n| `client_id` | No change. |\n| `redirect_uri`, `state` | No change, these parameters are now optional. |\n| `response_type` | This parameter is not used anymore. |\n| `types` | Superseded by `connector_capabilities`.<br>Use`connector_capabilities=bank` (bank connection) or `connector_capabilities=document` (provider connection). |\n\nPassing the code or access token as an URL fragment is no longer supported, use the `code` query parameter.\n\n| Callback parameter | Migration instructions |\n| - | - |\n| `code` | This parameter is not returned anymore. |\n| `state` | No change. |\n\n##### Behaviour change\n\nIn v3, the `/accounts` flow used to redirect to the `redirect_uri` after a connection addition. This is no longer the case in v4, where redirection is only performed when the user explicitly closes the flow. If you need to perform actions when a connection is added or removed, you should rely on webhooks.\n\n#### Protocol\nThis section describes the protocol used to set bank and provider accounts of a user, in case you don\'t want to use the webview.\n\nThe idea is to call the following services client-side (with AJAX in case of a web application), to ensure the bank and providers credentials will not be sent to your servers.\n\n1. /auth/init\n```http\nPOST /auth/init\n```\n```json\n{\n   "auth_token" : "fBqjMZbYddebUGlkR445JKPA6pCoRaGb",\n   "type" : "temporary",\n   "expires_in" : 1800,\n   "id_user": 1\n}\n```\nThis service creates a temporarily token, to use in the "Authorization" header in next calls to the API\n\nThe returned token has a life-time of 30 minutes, and should be transfered to the API then (cf Permanent Token), so that your server can get a permanent access_token.\n\nIt is possible to generate a permanent token immediately, by calling the service with the manage_token, or by supply parameters client_id and client_secret.\n\n2. /banks or /providers\n```http\nGET /banks?expand=fields\nAuthorization: Bearer <token>\n```\n```json\n{\n   "hidden" : false,\n         "charged" : true,\n         "name" : "American Express",\n         "id" : 30,\n         "fields" : [\n            {\n               "values" : [\n                  {\n                     "label" : "Particuliers/Professionnels",\n                     "value" : "pp"\n                  },\n                  {\n                     "value" : "ent",\n                     "label" : "Entreprises"\n                  }\n               ],\n               "label" : "Type de compte",\n               "regex" : null,\n               "name" : "website",\n               "type" : "list"\n            },\n            {\n               "type" : "password",\n               "label" : "Code secret",\n               "name" : "password",\n               "regex" : "^[0-9]{6}$"\n            }\n         ],\n      },\n      ...\n   ],\n   "total" : 44,\n}\n```\nYou get a list of connectors, and all associated fields needed to build the form at step 3.\nYou can also use that list to show to your user, all available banks.\n\n3. /users/me/connections\nMake a POST request and supply the id_bank (ID of the chosen bank) or id_provider (ID of provider), and all requested fields as key/value parameters.\nFor example:\n```http\nPOST /users/me/connections\nAuthorization: Bearer <token>\n-F login=12345678\n-F password=123456\n-F id_bank=59\n```\nYou can get the following return codes:\n\n|Code           |Description                                                  |\n|---------------|------------------------------------------------------------ |\n|200            |The connection has succeed and has been created              |\n|202            |It is necessary to provide complementary information. This occurs on the first connection on some kind of Boursorama accounts for example, where a SMS is sent to the customer. It is necessary to ask the user to fill fields requested in the fields, and do a POST again on /users/me/connections/ID, with the connection ID in id_connection. |\n|400            |Unable to connect to the website, the field error in the JSON can be **websiteUnavailable** or **wrongpass**  |\n|403            |Invalid token                                                |\n\n4. Activate accounts\nThe accounts the user wants to aggregate must be activated before any transaction or investment is retrieved.\nSeveral accounts can be activated in 1 request by separating the account ids with commas.\n```http\nPUT /users/me/connections/<id_connection>/accounts/<id_account>?all\n```\n\n5. Permanent token\nIf the user validates the share of his accounts, it is necessary to transform the temporary code to a permanent access_token (so that the user won\'t expire).\n\nTo do that, make a POST request on /auth/token/access with the following parameters:\n|Parameter            |Description                                                     |\n|---------------------|----------------------------------------------------------------|\n|code                 |The temporarily token which will let you get the access_token   |\n|client_id            |The ID of your client application                               |\n|client_secret        |The secret of your client application                           |\n\n```json\nPOST /auth/token/access\n\n{\n   "client_id" : 17473055,\n   "client_secret" : "54tHJHjvodbANVzaRtcLzlHGXQiOgw80",\n   "code" : "fBqjMZbYddebUGlkR445JKPA6pCoRaGb"\n}\n```\n```http\nHTTP/1.1 200 OK\n\n{\n   "access_token" : "7wBPuFfb1Hod82f1+KNa0AmrkIuQ3h1G",\n   "token_type":"Bearer"\n}\n```\n\n### Update accounts\nAnother important call is when a user wants to add/remove connections to banks or providers, or to change the password on one of them, it is advised to give him a temporarily code from the permanent access_token, with the following call (using the access_token as bearer):\n```http\nPOST /auth/token/code\nAuthorization: Bearer <token>\n```\n```json\n{\n   "code" : "/JiDppWgbmc+5ztHIUJtHl0ynYfw682Z",\n   "type" : "temporary",\n   "expires_in" : 1800,\n}\n```\nIts life-time is 30 minutes, and let the browser to list connections and accounts, via `GET /users/me/connections?expand=accounts` for example.\n\n To update the password of a connection, you can do a POST on the *connection* resource, with the field *password* in the data. The new credentials are checked to make sure they are valid, and the return codes are the same as when adding a connection.\n\n## Getting the data (Webhooks)\nYou have created your users and their connections, now it\'s time to get the data.\nThere are 2 ways to retrieve it, the 2 can be complementary:\n- make regular calls to the API\n- use the webhooks (recommended)\n\n### Manual Synchronization\nIt is possible to do a manual synchronization of a user. We recommend to use this method in case the user wants fresh data after logging in.\n\nTo trigger the synchronization, call the API as below:\n`PUT /users/ID/connections`\nThe following call is blocking until the synchronization is terminated.\n\nEven if it is not recommended, it\'s possible to fetch synchronously new data. To do that, you can use the *expand* parameter:\n` /users/ID/connections?expand=accounts[transactions,investments[type]],subscriptions`\n```json\n{\n   "connections" : [\n      {\n         "accounts" : [\n            {\n               "balance" : 7481.01,\n               "currency" : {\n                  "symbol" : "€",\n                  "id" : "EUR",\n                  "prefix" : false\n               },\n               "deleted" : null,\n               "display" : true,\n               "formatted_balance" : "7 481,01 €",\n               "iban" : "FR76131048379405300290000016",\n               "id" : 17,\n               "id_connection" : 7,\n               "investments" : [\n                  {\n                     "code" : "FR0010330902",\n                     "description" : "",\n                     "diff" : -67.86,\n                     "id" : 55,\n                     "id_account" : 19,\n                     "id_type" : 1,\n                     "label" : "Agressor PEA",\n                     "portfolio_share" : 0.48,\n                     "prev_diff" : 2019.57,\n                     "quantity" : 7.338,\n                     "type" : {\n                        "color" : "AABBCC",\n                        "id" : 1,\n                        "name" : "Fonds action"\n                     },\n                     "unitprice" : 488.98,\n                     "unitvalue" : 479.73,\n                     "valuation" : 3520.28\n                  }\n               ],\n               "last_update" : "2015-07-04 15:17:30",\n               "name" : "Compte chèque",\n               "number" : "3002900000",\n               "transactions" : [\n                  {\n                     "active" : true,\n                     "application_date" : "2015-06-17",\n                     "coming" : false,\n                     "comment" : null,\n                     "commission" : null,\n                     "country" : null,\n                     "date" : "2015-06-18",\n                     "date_scraped" : "2015-07-04 15:17:30",\n                     "deleted" : null,\n                     "documents_count" : 0,\n                     "formatted_value" : "-16,22 €",\n                     "id" : 309,\n                     "id_account" : 17,\n                     "id_category" : 9998,\n                     "id_cluster" : null,\n                     "last_update" : "2015-07-04 15:17:30",\n                     "new" : true,\n                     "original_currency" : null,\n                     "original_value" : null,\n                     "original_wording" : "FACTURE CB HALL\'S BEER",\n                     "rdate" : "2015-06-17",\n                     "simplified_wording" : "HALL\'S BEER",\n                     "state" : "parsed",\n                     "stemmed_wording" : "HALL\'S BEER",\n                     "type" : "card",\n                     "value" : -16.22,\n                     "wording" : "HALL\'S BEER"\n                  }\n               ],\n               "type" : "checking"\n            }\n         ],\n         "error" : null,\n         "expire" : null,\n         "id" : 7,\n         "id_user" : 7,\n         "id_bank" : 41,\n         "last_update" : "2015-07-04 15:17:31"\n      }\n   ],\n   "total" : 1,\n}\n```\n\n### Background synchronizations & Webhooks\nWebhooks are callbacks sent to your server, when an event is triggered during a synchronization.\nSynchronizations are automatic, the frequency can be set using the configuration key `autosync.frequency`.\nUsing webhooks allows you to get the most up-to-date data of your users, after each synchronization.\n\nThe automatic synchronization makes it possible to recover new bank entries, or new invoices, at a given frequency.\nYou have the possibility to add webhooks on several events, and choose to receive each one on a distinct URL.\nTo see the list of available webhooks you can call the endpoint hereunder:\n```\ncurl https://demo.biapi.pro/2.0/webhooks_events \\\n  -H \'Authorization: Bearer <token>\'\n```\n\nThe background synchronizations for each user are independent, and their plannings are spread over the day so that they do not overload any website.\n\nOnce the synchronization of a user is over, a POST request is sent on the callback URL you have defined, including all webhook data.\nA typical json sent to your server is as below:\n```http\nPOST /callback HTTP/1.1\nHost: example.org\nContent-Length: 959\nAccept-Encoding: gzip, deflate, compress\nAccept: */*\nUser-Agent: Budgea API/2.0\nContent-Type: application/json; charset=utf-8\nAuthorization: Bearer sl/wuqgD2eOo+4Zf9FjvAz3YJgU+JKsJ\n\n{\n   "connections" : [\n      {\n         "accounts" : [\n            {\n               "balance" : 7481.01,\n               "currency" : {\n                  "symbol" : "€",\n                  "id" : "EUR",\n                  "prefix" : false\n               },\n               "deleted" : null,\n               "display" : true,\n               "formatted_balance" : "7 481,01 €",\n               "iban" : "FR76131048379405300290000016",\n               "id" : 17,\n               "id_connection" : 7,\n               "investments" : [\n                  {\n                     "code" : "FR0010330902",\n                     "description" : "",\n                     "diff" : -67.86,\n                     "id" : 55,\n                     "id_account" : 19,\n                     "id_type" : 1,\n                     "label" : "Agressor PEA",\n                     "portfolio_share" : 0.48,\n                     "prev_diff" : 2019.57,\n                     "quantity" : 7.338,\n                     "type" : {\n                        "color" : "AABBCC",\n                        "id" : 1,\n                        "name" : "Fonds action"\n                     },\n                     "unitprice" : 488.98,\n                     "unitvalue" : 479.73,\n                     "valuation" : 3520.28\n                  }\n               ],\n               "last_update" : "2015-07-04 15:17:30",\n               "name" : "Compte chèque",\n               "number" : "3002900000",\n               "transactions" : [\n                  {\n                     "active" : true,\n                     "application_date" : "2015-06-17",\n                     "coming" : false,\n                     "comment" : null,\n                     "commission" : null,\n                     "country" : null,\n                     "date" : "2015-06-18",\n                     "date_scraped" : "2015-07-04 15:17:30",\n                     "deleted" : null,\n                     "documents_count" : 0,\n                     "formatted_value" : "-16,22 €",\n                     "id" : 309,\n                     "id_account" : 17,\n                     "id_category" : 9998,\n                     "id_cluster" : null,\n                     "last_update" : "2015-07-04 15:17:30",\n                     "new" : true,\n                     "original_currency" : null,\n                     "original_value" : null,\n                     "original_wording" : "FACTURE CB HALL\'S BEER",\n                     "rdate" : "2015-06-17",\n                     "simplified_wording" : "HALL\'S BEER",\n                     "state" : "parsed",\n                     "stemmed_wording" : "HALL\'S BEER",\n                     "type" : "card",\n                     "value" : -16.22,\n                     "wording" : "HALL\'S BEER"\n                  }\n               ],\n               "type" : "checking"\n            }\n         ],\n         "bank" : {\n            "id_weboob" : "ing",\n            "charged" : true,\n            "name" : "ING Direct",\n            "id" : 7,\n            "hidden" : false\n         },\n         "error" : null,\n         "expire" : null,\n         "id" : 7,\n         "id_user" : 7,\n         "id_bank" : 41,\n         "last_update" : "2015-07-04 15:17:31"\n      }\n   ],\n   "total" : 1,\n   "user" : {\n      "signin" : "2015-07-04 15:17:29",\n      "id" : 7,\n      "platform" : "sharedAccess"\n   }\n}\n```\nThe authentication on the callback is made with the access_token of the user (which is a shared secret between your server and the Budgea API).\n\nWhen you are in production, it is needed to define a HTTPS URL using a valid certificate, delivered by a recognized authority. If this is not the case, you can contact us to add your CA (Certificate Authority) to our PKI (Public Key Infrastructure).\n\nImportant: it is necessary to send back a HTTP 200 code, without what we consider that data is not correctly taken into account on your system, and it will be sent again at the next user synchronization.\n\n## Guidelines for production\nNow you should have integrated the API inside your application. Make sure your Webhooks URLs are in HTTPS, if so you can enable the production state of the API.\n\nTo make things great, here are some good practices, please check you have respected them:\n- You have provided to your users a way to configure their accounts\n- You have provided to your users a way to change their account passwords\n- You consider the **error** field of Connections, to alert the user in case the state is **wrongpass**\n- You map IDs of Accounts, Subscriptions, Transactions and Documents in your application, to be sure to correctly match them\n- When the deleted field is set on a bank transaction, you delete it in your database\n- You don\'t loop on all users to launch synchronizations, this might saturate the service\n\nIf you have questions about above points, please contact us. Otherwise, you can put into production!\n\n### Going further\nIf you want to raise the bar for your app and add features such as the ability to do transfers, get invoices, aggregate patrimony and more, please refer to the sections below.\nWe\'ll discuss complementary APIs building upon the aggregation, allowing for the best of financial apps.\n\n## Budgea API Pay\nThis API allows for the emition of transfers between the aggregated accounts.\nJust like the simple aggregation, BI provides a webview or a protocol to follow, to implement this feature.\n\n### API pay protocol\nThis section describes how the transfer and recipient protocol work, in case you don\'t want to integrate the webview.\nThe idea is to do following calls client side (with AJAX in case of a web application), so that the interaction with the Budgea API is transparent.\n\n#### Executing a transfer\n1. /auth/token/code\nIf you do calls client side, get a new temporary code for the user, from the access_token. This will prevent security issues.\n```\ncurl -d \'\' \\\n  https://demo.biapi.pro/2.0/auth/token/code \\\n  -H \'Authorization: Bearer <token>\'\n```\n```json\n{\n   "code": "/JiDppWgbmc+5ztHIUJtHl0ynYfw682Z",\n   "type": "temporary",\n   "expires_in": 1800\n}\n```\nThe returned token has a life-time of 30 minutes.\n\n2. /users/me/accounts?able_to_transfer=1\nList all the accounts that can do transfers. Authenticate the call with the code you got at step 1.\n```\ncurl https://demo.biapi.pro/2.0/users/me/accounts?able_to_transfer=1 \\\n  -H \'Authorization: Bearer /JiDppWgbmc+5ztHIUJtHl0ynYfw682Z\'\n```\n```json\n{\n  "accounts" : [\n      {\n         "display" : true,\n         "balance" : 2893.36,\n         "id_type" : 2,\n         "number" : "****1572",\n         "type" : "checking",\n         "deleted" : null,\n         "bic" : "BNPAFRPPXXX",\n         "bookmarked" : false,\n         "coming" : -2702.74,\n         "id_user" : 1,\n         "original_name" : "Compte de chèques",\n         "currency" : {\n            "symbol" : "€",\n            "id" : "EUR",\n            "prefix" : false\n         },\n         "name" : "lol",\n         "iban" : "FR7630004012550000041157244",\n         "last_update" : "2016-12-28 12:31:04",\n         "id" : 723,\n         "formatted_balance" : "2893,36 €",\n         "able_to_transfer" : true,\n         "id_connection" : 202\n      }\n   ],\n   "total" : 1\n}\n```\n\n3. /users/me/accounts/ID/recipients\nList all available recipients for a given account.\n```\ncurl https://demo.biapi.pro/2.0/users/me/accounts/723/recipients?limit=1 \\\n  -H \'Authorization: Bearer /JiDppWgbmc+5ztHIUJtHl0ynYfw682Z\'\n```\n```json\n{\n  "total" : 27,\n   "recipients" : [\n      {\n         "bank_name" : "BNP PARIBAS",\n         "bic" : "BNPAFRPPXXX",\n         "category" : "Interne",\n         "deleted" : null,\n         "enabled_at" : "2016-10-31 18:52:53",\n         "expire" : null,\n         "iban" : "FR7630004012550003027641744",\n         "id" : 1,\n         "id_account" : 1,\n         "id_target_account" : 2,\n         "label" : "Livret A",\n         "last_update" : "2016-12-05 12:07:24",\n         "time_scraped" : "2016-10-31 18:52:54",\n         "webid" : "2741588268268091098819849694548441184167285851255682796371"\n      }\n   ]\n}\n```\n\n4. /users/me/accounts/ID/recipients/ID/transfers\nCreate the transfer\n```\ncurl \\\n  https://demo.biapi.pro/2.0/users/me/accounts/1/recipients/1/transfers \\\n  -H \'Authorization: Bearer /JiDppWgbmc+5ztHIUJtHl0ynYfw682Z\' \\\n  -F amount=10, \\\n  -F label="Test virement", \\\n  -F exec_date="2018-09-12" // optional\n```\n```json\n{\n   "account_iban" : "FR7630004012550000041157244",\n   "amount" : 10,\n   "currency" : {\n      "id" : "EUR",\n      "prefix" : false,\n      "symbol" : "€"\n   },\n   "exec_date" : "2018-09-12",\n   "fees" : null\n   "formatted_amount" : "10,00 €",\n   "id" : 22,\n   "id_account" : 1,,\n   "id_recipient" : 1,\n   "label" : "Test virement",\n   "recipient_iban" : "FR7630004012550003027641744",\n   "register_date" : "2018-09-12 10:34:59",\n   "state" : "created",\n   "webid" : null\n}\n```\n\n5. /users/me/transfers/ID\nExecute the transfer\n```\ncurl \\\n  https://demo.biapi.pro/2.0/users/me/transfers/22 \\\n  -H \'Authorization: Bearer /JiDppWgbmc+5ztHIUJtHl0ynYfw682Z\' \\\n  -F validated=true\n```\n```json\n{\n   "account_iban" : "FR7630004012550000041157244",\n   "amount" : 10,\n   "currency" : {\n      "id" : "EUR",\n      "prefix" : false,\n      "symbol" : "€"\n   },\n   "exec_date" : "2016-12-19",\n   "fees" : null,\n   "fields" : [\n      {\n         "label" : "Code secret BNP Paribas",\n         "type" : "password",\n         "regex" : "^[0-9]{6}$",\n         "name" : "password"\n      }\n   ],\n   "formatted_amount" : "10,00 €",\n   "id" : 22,\n   "id_account" : 1,\n   "id_recipient" : 1,\n   "label" : "Test virement",\n   "recipient_iban" : "FR7630004012550003027641744",\n   "register_date" : "2016-12-19 10:34:59",\n   "state" : "created",\n   "webid" : null\n}\n```\nHere, an authentication step asks user to enter his bank password. The transfer can be validated with:\n\n```\ncurl \\\n  https://demo.biapi.pro/2.0/users/me/transfers/22 \\\n  -H \'Authorization: Bearer /JiDppWgbmc+5ztHIUJtHl0ynYfw682Z\' \\\n  -F validated=true \\\n  -F password="123456"\n```\n```json\n{\n   "account_iban" : "FR7630004012550000041157244",\n   "currency" : {\n      "id" : "EUR",\n      "prefix" : false,\n      "symbol" : "€"\n   },\n   "amount" : 10,\n   "exec_date" : "2016-12-19",\n   "fees" : 0,\n   "formatted_amount" : "10,00 €",\n   "id" : 22,\n   "id_account" : 1,\n   "id_recipient" : 1,\n   "label" : "Test virement",\n   "recipient_iban" : "FR7630004012550003027641744",\n   "register_date" : "2016-12-19 10:34:59",\n   "state" : "pending",\n   "webid" : "ZZ10C4FKSNP05TK95"\n}\n```\nThe field state is changed to *pending*, telling that the transfer has been correctly executed on the bank. A connection synchronization is then launched, to find the bank transaction in the movements history. In this case, the transfer state will be changed to *done*.\n\n#### Adding a recipient\n1. /auth/token/code\nGet a temporary token for the user. Same procedure than step 1 for a transfer.\n\n2. /users/me/accounts?able_to_transfer=1\nList accounts allowing transfers. Same procedure than step 2 for a transfer.\n\n3. /users/me/accounts/ID/recipients/\nAdd a new recipient.\n```\ncurl \\\n  https://demo.biapi.pro/2.0/users/me/accounts/1/recipients \\\n  -H \'Authorization: Bearer /JiDppWgbmc+5ztHIUJtHl0ynYfw682Z\' \\\n  -F iban=FR7613048379405300290000355 \\\n  -F label="Papa", \\\n  -F category="Famille" // optional\n```\n```json\n{\n   "bank_name" : "BNP PARIBAS",\n   "bic" : "BNPAFRPPXXX",\n   "category" : "Famille",\n   "deleted" : null,\n   "enabled_at" : null,\n   "expire" : "2017-04-29 16:56:20",\n   "fields" : [\n      {\n         "label" : "Veuillez entrer le code reçu par SMS",\n         "type" : "password",\n         "regex" : "^[0-9]{6}$",\n         "name" : "sms"\n      }\n   ],\n   "iban" : "FR7613048379405300290000355",\n   "id" : 2,\n   "id_account" : 1,\n   "id_target_account" : null,\n   "label" : "Papa",\n   "last_update" : "2017-04-29 16:26:20",\n   "time_scraped" : null,\n   "webid" : null\n}\n```\nIt is necessary to post on the object Recipient with the requested fields (here sms), until the add is validated:\n```\ncurl \\\n  https://demo.biapi.pro/2.0/users/me/accounts/1/recipients/2 \\\n  -H \'Authorization: Bearer /JiDppWgbmc+5ztHIUJtHl0ynYfw682Z\' \\\n  -F sms="123456"\n```\n```json\n{\n   "bank_name" : "BNP PARIBAS",\n   "bic" : "BNPAFRPPXXX",\n   "category" : "Famille",\n   "deleted" : null,\n   "enabled_at" : "2017-05-01 00:00:00",\n   "expire" : null,\n   "iban" : "FR7613048379405300290000355",\n   "id" : 2,\n   "id_account" : 1,\n   "id_target_account" : null,\n   "label" : "Papa",\n   "last_update" : "2017-04-29 16:26:20",\n   "time_scraped" : null,\n   "webid" : "2741588268268091098819849694548441184167285851255682796371"\n}\n```\nIf the field enabled_at is in the future, it means that it isn\'t possible yet to execute a transfer, as the bank requires to wait a validation period.\n\n### API Pay Webview\nThis section describes how to integrate the webview of the Budgea Pay API inside your application, to let your users do transfers to their recipients.\n\n#### User redirection\nTo redirect the user to the webview, it is necessary to build a URI authenticated with a temporary token.\nThis can be done from our library, or by calling the endpoint `/auth/token/code` (see the protocol section for an example).\nIf the parameter **redirect_uri** is supplied, the user will be redirected to that page once the transfer is done.\n\n#### List of pages\nHere are a list a pages you may call to redirect your user directly on a page of the process:\n|Path                                 |Description of the page                                                           |\n|-------------------------------------|----------------------------------------------------------------------------------|\n|/transfers                           |List Transfers                                                                    |\n|/transfers/accounts                  |List emitter accounts                                                             |\n|/transfers/accounts/id/recipients    |List recipients                                                                   |\n|/transfers/accounts/id/recipients/id |Initialization of a transfer between the account and the recipient                |\n|/transfers/id                        |Detail of a given transfer                                                        |\n\n## Deprecated\n\nThis section lists all the deprecated features in Budgea API. The associated date is the date of its removal.\n**Do not use them**.\n\n### Key Investments (**2019-06-24**)\n\nAdding a temporary new key "all_investments" that will include deleted investments in the **webhooks**.\n\n### No automatic expand on User objects (**2019-07-30**)\nIn the API responses, by default, User objects won\'t display the keys "config", "alert_settings" and "invites" anymore.\nYou will still be able to access this data by expanding the request.\nExample: GET /users/me/?expand=alert_settings,config\n\n### Renaming of "type" field for jwt tokens (**2019-07-30**)\nFor user\'s tokens in the jwt format, the "type" field will be renamed from "shared_access" to "sharedAccess".\n',
    title='Budgea API Documentation',
    version='2.0',
    servers=[{'url': '//budgea.biapi.pro/2.0'}],
)


@app.get('/account_types', tags=['account_type_management', 'user_account_operations'])
def get_account_types(expand: Optional[str] = None):
    """
    Get account types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/account_types/{id_account_type}', tags=['account_type_management'])
def get_account_types__id_account_type(
    id_account_type: int, expand: Optional[str] = None
):
    """
    Get an account type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin/jwt',
    description=""" This endpoint generates a new jwt manage token. It requires an admin manage token to be used<br><br> """,
    tags=['user_authentication', 'user_auth_token_management'],
)
def post_admin_jwt(file: UploadFile):
    """
    Generate a jwt manage token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/auth/init',
    description=""" This endpoint creates a new temporary token related to a new anonymous user.<br><br>It will expire 30 minutes after.<br><br>Note: if you supply client_id and client_secret, or if you call this endpoint with the manage_token, the token will be permanent.<br><br> """,
    tags=['user_authentication', 'user_data_management', 'user_account_operations'],
)
def post_auth_init(file: UploadFile):
    """
    Create a new anonymous user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/auth/jwt',
    description=""" This endpoint generates a new jwt token for the user. This token will last the time in minutes given by the config key auth.default_token_expire (permanent if this the parameter expire=False is given)<br><br> """,
    tags=['user_authentication', 'user_auth_token_management'],
)
def post_auth_jwt(file: UploadFile):
    """
    Generate a user jwt token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/auth/renew', tags=['user_authentication', 'user_auth_token_management'])
def post_auth_renew(file: UploadFile):
    """
    Get a new access token given an user id and client credentials
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/auth/token',
    description=""" This endpoint removes the token in use.<br><br> """,
    tags=['user_data_management', 'user_account_operations'],
)
def delete_auth_token():
    """
    Remove user access
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/auth/token',
    description=""" Request a new user token by giving an username and a password. Or a manage payment token by giving a client<br><br><br><br> """,
    tags=['user_authentication', 'user_auth_token_management'],
)
def post_auth_token(file: UploadFile):
    """
    Login to API with credentials
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/auth/token/access',
    description=""" In order to register a new user with the OAuth 2 process, the client has to call this endpoint to request a granted access_token with the received temporary code.<br><br> """,
    tags=['user_authentication', 'user_auth_token_management'],
)
def post_auth_token_access(file: UploadFile):
    """
    Transform a temporary code to a access_token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/auth/token/code',
    description=""" This endpoint generates a new temporary token for the user.<br><br>In case the access_token is used by a trusted device, and you want to let another one (for example a web browser) access to user resources, use this service to create a token which will expire in 30 minutes.<br><br>Additionally, you can also generate a temporary single-use token by specifying 'type=singleAccess' as query parameter. A single-use token can only be used once no matter the endpoint being accessed.<br><br> """,
    tags=['user_authentication', 'user_auth_token_management'],
)
def get_auth_token_code():
    """
    Generate a user temporary token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/banks',
    tags=[
        'bank_connector_management',
        'connector_data_management',
        'provider_data_management',
    ],
)
def get_banks(expand: Optional[str] = None):
    """
    Get list of connectors
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/banks/categories',
    description=""" It requires the name of the category to be created<br><br> """,
    tags=['category_management', 'user_defined_category_management'],
)
def post_banks_categories(expand: Optional[str] = None, file: UploadFile = ...):
    """
    Create bank categories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete('/banks/categories/{id_category}', tags=['category_management'])
def delete_banks_categories__id_category(
    id_category: int, expand: Optional[str] = None
):
    """
    Delete the supplied category
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/banks/categories/{id_category}',
    description=""" Edit the name for the supplied category.<br><br> """,
    tags=['category_management', 'user_defined_category_management'],
)
def post_banks_categories__id_category(
    id_category: int, expand: Optional[str] = None, file: UploadFile = ...
):
    """
    Edit a bank categories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/banks/{id_bank}',
    tags=[
        'bank_connector_management',
        'connector_data_management',
        'provider_data_management',
    ],
)
def get_banks__id_bank(id_bank: int, expand: Optional[str] = None):
    """
    Get a connector
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/banks/{id_connector}/connections',
    description=""" By default, it selects a set of 3 connections with the 'diversity' method<br><br> """,
    tags=['bank_connector_management', 'user_connection_data_management'],
)
def get_banks__id_connector_connections(
    id_connector: int,
    method: Optional[str] = None,
    n: Optional[int] = None,
    type: Optional[int] = None,
    occurences: Optional[int] = None,
    source: Optional[str] = None,
    minutes_without_sync: Optional[int] = None,
    expand: Optional[str] = None,
):
    """
    Get a subset of id_connection for a given bank. Different selection methode are possible
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/banks/{id_connector}/logos',
    description=""" This endpoint returns all links to files associated with this connector.<br><br> """,
    tags=[
        'bank_connector_management',
        'connector_data_management',
        'provider_data_management',
    ],
)
def get_banks__id_connector_logos(id_connector: int, expand: Optional[str] = None):
    """
    Get all links to the files associated with this connector.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/banks/{id_connector}/logos/main',
    description=""" This endpoint returns all links to files associated with this connector.<br><br> """,
    tags=[
        'bank_connector_management',
        'connector_data_management',
        'provider_data_management',
    ],
)
def get_banks__id_connector_logos_main(id_connector: int, expand: Optional[str] = None):
    """
    Get all links to the files associated with this connector.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/banks/{id_connector}/logos/thumbnail',
    description=""" This endpoint returns all links to files associated with this connector.<br><br> """,
    tags=[
        'bank_connector_management',
        'connector_data_management',
        'provider_data_management',
    ],
)
def get_banks__id_connector_logos_thumbnail(
    id_connector: int, expand: Optional[str] = None
):
    """
    Get all links to the files associated with this connector.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/banks/{id_connector}/sources',
    tags=[
        'bank_connector_management',
        'connector_data_management',
        'provider_data_management',
    ],
)
def get_banks__id_connector_sources(id_connector: int, expand: Optional[str] = None):
    """
    Get list of connector sources
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/banks/{id_connector}/sources/{id_connector_source}/fields',
    tags=[
        'bank_connector_management',
        'connector_data_management',
        'provider_data_management',
    ],
)
def get_banks__id_connector_sources__id_connector_source_fields(
    id_connector: int, id_connector_source: int = ..., expand: Optional[str] = None
):
    """
    Get fields specific to a domain and a source
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/banks/{id_connector}/sources/{id_source}',
    tags=[
        'bank_connector_management',
        'connector_data_management',
        'provider_data_management',
    ],
)
def get_banks__id_connector_sources__id_source(
    id_connector: int, id_source: int = ..., expand: Optional[str] = None
):
    """
    Get the connector source
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/categories',
    description=""" Ressource to get all existing categories<br><br> """,
    tags=['category_management', 'user_defined_category_management'],
)
def get_categories(expand: Optional[str] = None):
    """
    Get all categories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/categories/keywords',
    description=""" If the keyword already exists the keyword is not added. Used for the categorization of transactions.<br><br>Form params: - id_category (integer): a reference towards the category associated with the keyword - keyword (string): the searched keyword - income (bool): 1 if the associated category represents an income else 0 - priority (integer): sets the priority for the keyword, used when categorizing<br><br> """,
    tags=['category_management', 'user_defined_category_management'],
)
def post_categories_keywords(expand: Optional[str] = None):
    """
    Add a new keyword associated with a category in the database.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/categories/keywords/{id_keyword}',
    tags=['transaction_key_value_management', 'transaction_metadata_management'],
)
def delete_categories_keywords__id_keyword(
    id_keyword: int, expand: Optional[str] = None
):
    """
    Delete a particular key-value pair on a transaction.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/categorize',
    description=""" It requires an array of transaction dictionaries. Any fields of transactions that are not required will be kept in the response. The response contains the list of transactions with two more fields: id_category and state (it indicates how the transaction has been categorized)<br><br> """,
    tags=[
        'transaction_clustering_operations',
        'user_defined_category_management',
        'category_management',
    ],
)
def post_categorize(file: UploadFile):
    """
    categorize transactions without storing them
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/certificate/{type}', tags=['provider_data_management'])
def get_certificate__type(type: str, expand: Optional[str] = None):
    """
    Get the latest certificate of a type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/clients', tags=['client_data_management'])
def get_clients(expand: Optional[str] = None):
    """
    List clients
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/clients', tags=['client_data_management'])
def post_clients(expand: Optional[str] = None, file: UploadFile = ...):
    """
    Create a client
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/clients/{id_client}', tags=['client_data_management', 'user_data_management']
)
def delete_clients__id_client(id_client: int, expand: Optional[str] = None):
    """
    Delete a client
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/clients/{id_client}',
    description=""" If you use the manage_token or a configuration token, you will get also the client secret.<br><br> """,
    tags=['client_data_management'],
)
def get_clients__id_client(id_client: int, expand: Optional[str] = None):
    """
    Get information about a client
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put('/clients/{id_client}', tags=['client_data_management'])
def put_clients__id_client(
    id_client: int, expand: Optional[str] = None, file: UploadFile = ...
):
    """
    Update a client
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/clients/{id_client}/logo',
    tags=['client_data_management', 'connector_data_management'],
)
def delete_clients__id_client_logo(id_client: int, expand: Optional[str] = None):
    """
    Delete the client logo
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/clients/{id_client}/logo',
    tags=['client_data_management', 'connector_data_management'],
)
def post_clients__id_client_logo(id_client: int, expand: Optional[str] = None):
    """
    Update the client logo
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/config', description=""" <br><br> """, tags=['api_configuration_management'])
def get_config(search: Optional[str] = None):
    """
    Get configuration of the API.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/config',
    tags=['api_configuration_management', 'user_specific_configuration_management'],
)
def post_config():
    """
    Insert/update configuration key(s)/value(s) on the API.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/config/logs', description=""" <br><br> """, tags=['api_configuration_management']
)
def get_config_logs(
    search: Optional[str] = None,
    type: Optional[str] = None,
    min_date: Optional[date_aliased] = None,
    max_date: Optional[date_aliased] = None,
    expand: Optional[str] = None,
):
    """
    Get configuration change history of the API.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/connections', tags=['connection_log_management'])
def get_connections(expand: Optional[str] = None):
    """
    Get connections without a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/connections/{id_connection}/logs',
    description=""" Get logs about connections.<br><br> """,
    tags=[
        'connection_log_management',
        'logging_management',
        'user_connection_data_management',
    ],
)
def get_connections__id_connection_logs(
    id_connection: Union[int, Optional[int], Optional[int], Optional[int]],
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    min_date: Optional[date_aliased] = None,
    max_date: Optional[date_aliased] = None,
    period: Optional[str] = None,
    id_user: Optional[int] = None,
    id_connector: Optional[int] = None,
    connector_uuid: Optional[str] = None,
    error: Optional[str] = None,
    id_source: Optional[int] = None,
    id_max: Optional[int] = None,
    expand: Optional[str] = None,
):
    """
    Get connection logs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/connections/{id_connection}/sources',
    tags=['connection_log_management', 'user_connection_data_management'],
)
def get_connections__id_connection_sources(
    id_connection: int, expand: Optional[str] = None
):
    """
    Get connection sources
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/connections/{id_connection}/sources/{id_source}',
    description=""" This will make it so the specified source will not be synchronized anymore.<br><br> """,
    tags=['connection_log_management', 'user_connection_data_management'],
)
def delete_connections__id_connection_sources__id_source(
    id_connection: int, id_source: int = ..., expand: Optional[str] = None
):
    """
    Disable a connection source
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/connections/{id_connection}/sources/{id_source}',
    description=""" This endpoint is used to enable a source or force a synchronization on it.<br><br> """,
    tags=[
        'connection_log_management',
        'client_data_management',
        'user_connection_data_management',
    ],
)
def post_connections__id_connection_sources__id_source(
    id_connection: int,
    id_source: int = ...,
    background: Optional[bool] = None,
    expand: Optional[str] = None,
    file: UploadFile = ...,
):
    """
    "
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/connections/{id_connection}/sources/{id_source}',
    description=""" This endpoint is used to enable a source or force a synchronization on it.<br><br> """,
    tags=['connection_log_management', 'user_connection_data_management'],
)
def put_connections__id_connection_sources__id_source(
    id_connection: int,
    id_source: int = ...,
    background: Optional[bool] = None,
    expand: Optional[str] = None,
    file: UploadFile = ...,
):
    """
    Update connection source
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/connectors',
    tags=[
        'bank_connector_management',
        'connector_data_management',
        'provider_data_management',
    ],
)
def get_connectors(expand: Optional[str] = None):
    """
    Get list of connectors
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/connectors',
    description=""" Send a request to add a new connector<br><br> """,
    tags=['bank_connector_management', 'connector_data_management'],
)
def post_connectors(expand: Optional[str] = None, file: UploadFile = ...):
    """
    Request a new connector
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put('/connectors', tags=['bank_connector_management', 'connector_data_management'])
def put_connectors(expand: Optional[str] = None, file: UploadFile = ...):
    """
    Enable/disable several connectors
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/connectors/{id_connector}',
    tags=[
        'bank_connector_management',
        'connector_data_management',
        'provider_data_management',
    ],
)
def get_connectors__id_connector(id_connector: int, expand: Optional[str] = None):
    """
    Get a connector
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/connectors/{id_connector}',
    description=""" <br><br> """,
    tags=['bank_connector_management', 'connector_data_management'],
)
def put_connectors__id_connector(
    id_connector: int, expand: Optional[str] = None, file: UploadFile = ...
):
    """
    Edit the provided connector
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/connectors/{id_connector}/logos',
    description=""" This endpoint returns all links to files associated with this connector.<br><br> """,
    tags=[
        'bank_connector_management',
        'connector_data_management',
        'provider_data_management',
    ],
)
def get_connectors__id_connector_logos(id_connector: int, expand: Optional[str] = None):
    """
    Get all links to the files associated with this connector.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/connectors/{id_connector}/logos',
    description=""" This endpoint creates a connector logo. You can either pass a file to as a parameter to insert and link it with the connector or pass an id_file to link a connector with an existing file. Will fail if the file is already linked with that connector.<br><br>Form params: - id_file (integer): The id of the file to link with that connector. - img (string): Path to the image to link with that connector.<br><br> """,
    tags=['connector_data_management', 'bank_connector_management'],
)
def post_connectors__id_connector_logos(
    id_connector: int, expand: Optional[str] = None
):
    """
    Create a connector Logo
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/connectors/{id_connector}/logos',
    description=""" This endpoint creates or update a connector logo. This logo is a mapping between a file (/file route) and a connector (/connectors route) or a provider (/providers route).<br><br>Form params: - id_file (integer): The id of the file to link with that connector.<br><br> """,
    tags=['bank_connector_management', 'connector_data_management'],
)
def put_connectors__id_connector_logos(id_connector: int, expand: Optional[str] = None):
    """
    Create or Update a connector Logo
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/connectors/{id_connector}/logos/main',
    description=""" This endpoint returns all links to files associated with this connector.<br><br> """,
    tags=[
        'bank_connector_management',
        'connector_data_management',
        'provider_data_management',
    ],
)
def get_connectors__id_connector_logos_main(
    id_connector: int, expand: Optional[str] = None
):
    """
    Get all links to the files associated with this connector.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/connectors/{id_connector}/logos/thumbnail',
    description=""" This endpoint returns all links to files associated with this connector.<br><br> """,
    tags=[
        'bank_connector_management',
        'connector_data_management',
        'provider_data_management',
    ],
)
def get_connectors__id_connector_logos_thumbnail(
    id_connector: int, expand: Optional[str] = None
):
    """
    Get all links to the files associated with this connector.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/connectors/{id_connector}/logos/{id_logo}', tags=['connector_data_management']
)
def delete_connectors__id_connector_logos__id_logo(
    id_connector: int, id_logo: int = ..., expand: Optional[str] = None
):
    """
    Delete a single Logo object.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/connectors/{id_connector}/logos/{id_logo}',
    description=""" This endpoint creates or update a connector logo. This logo is a mapping between a file (/file route) and a connector (/connectors route) or a provider (/providers route).<br><br>Form params: - id_file (integer): The id of the file to link with that connector.<br><br> """,
    tags=['connector_data_management', 'bank_connector_management'],
)
def put_connectors__id_connector_logos__id_logo(
    id_connector: int, id_logo: int = ..., expand: Optional[str] = None
):
    """
    Create or Update a connector Logo.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/connectors/{id_connector}/sources',
    tags=[
        'bank_connector_management',
        'provider_data_management',
        'connector_data_management',
    ],
)
def get_connectors__id_connector_sources(
    id_connector: int, expand: Optional[str] = None
):
    """
    Get list of connector sources
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/connectors/{id_connector}/sources',
    tags=[
        'bank_connector_management',
        'connector_data_management',
        'provider_data_management',
    ],
)
def put_connectors__id_connector_sources(
    id_connector: int, expand: Optional[str] = None, file: UploadFile = ...
):
    """
    Edit several connector sources
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/connectors/{id_connector}/sources/{id_connector_source}/fields',
    tags=['bank_connector_management', 'provider_data_management'],
)
def get_connectors__id_connector_sources__id_connector_source_fields(
    id_connector: int, id_connector_source: int = ..., expand: Optional[str] = None
):
    """
    Get fields specific to a domain and a source
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/connectors/{id_connector}/sources/{id_source}',
    tags=[
        'bank_connector_management',
        'provider_data_management',
        'connector_data_management',
    ],
)
def get_connectors__id_connector_sources__id_source(
    id_connector: int, id_source: int = ..., expand: Optional[str] = None
):
    """
    Get the connector source
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/connectors/{id_connector}/sources/{id_source}',
    tags=[
        'bank_connector_management',
        'connector_data_management',
        'provider_data_management',
    ],
)
def put_connectors__id_connector_sources__id_source(
    id_connector: int,
    id_source: int = ...,
    expand: Optional[str] = None,
    file: UploadFile = ...,
):
    """
    Edit the provided connector source
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/incidents',
    description=""" By default, provide all incidents. Results are paginated. Some filters can be set via query parameters.<br><br> """,
    tags=['incident_log_management', 'logging_management'],
)
def get_incidents(
    state: Optional[str] = None,
    id: Optional[int] = None,
    weboob_id: Optional[str] = None,
    start_date: Optional[str] = None,
    end_date: Optional[str] = None,
    page: Optional[int] = None,
    size: Optional[int] = None,
):
    """
    Get incidents logs.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/invoicing',
    description=""" You can get all the invoicing data or just specific ones by using the available parameters.<br><br>If no parameters are specified, no invoicing data is returned.<br><br> """,
    tags=['invoicing_operations', 'client_data_management'],
)
def get_invoicing(
    min_date: Optional[date_aliased] = None,
    max_date: Optional[date_aliased] = None,
    users_synced: Optional[str] = None,
    users_bank: Optional[str] = None,
    users_bill: Optional[str] = None,
    accounts_synced: Optional[str] = None,
    subscriptions_synced: Optional[str] = None,
    connections_synced: Optional[str] = None,
    connections_account: Optional[str] = None,
    transfers_synced: Optional[str] = None,
    payments_synced: Optional[str] = None,
    all: Optional[str] = None,
    detail: Optional[str] = None,
):
    """
    Get invoicing data for a given period (default is the current month).
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/logs',
    description=""" Get logs about connections.<br><br> """,
    tags=[
        'connection_log_management',
        'logging_management',
        'user_connection_data_management',
    ],
)
def get_logs(
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    min_date: Optional[date_aliased] = None,
    max_date: Optional[date_aliased] = None,
    period: Optional[str] = None,
    id_user: Optional[int] = None,
    id_connection: Optional[int] = None,
    id_connector: Optional[int] = None,
    connector_uuid: Optional[str] = None,
    error: Optional[str] = None,
    id_source: Optional[int] = None,
    id_max: Optional[int] = None,
    expand: Optional[str] = None,
):
    """
    Get connection logs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/monitoring', tags=['incident_log_management', 'performance_monitoring'])
def get_monitoring(period: Optional[int] = None):
    """
    get performances stats on this instance
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers',
    tags=[
        'bank_connector_management',
        'connector_data_management',
        'provider_data_management',
    ],
)
def get_providers(expand: Optional[str] = None):
    """
    Get list of connectors
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/{id_connector}/connections',
    description=""" By default, it selects a set of 3 connections.<br><br> """,
    tags=['provider_data_management', 'bank_connector_management'],
)
def get_providers__id_connector_connections(
    id_connector: int, range: Optional[int] = None, expand: Optional[str] = None
):
    """
    Get a random subset of provider's id_connection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/{id_connector}/logos',
    description=""" This endpoint returns all links to files associated with this connector.<br><br> """,
    tags=[
        'bank_connector_management',
        'connector_data_management',
        'provider_data_management',
    ],
)
def get_providers__id_connector_logos(id_connector: int, expand: Optional[str] = None):
    """
    Get all links to the files associated with this connector.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/{id_connector}/logos/main',
    description=""" This endpoint returns all links to files associated with this connector.<br><br> """,
    tags=[
        'bank_connector_management',
        'connector_data_management',
        'provider_data_management',
    ],
)
def get_providers__id_connector_logos_main(
    id_connector: int, expand: Optional[str] = None
):
    """
    Get all links to the files associated with this connector.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/{id_connector}/logos/thumbnail',
    description=""" This endpoint returns all links to files associated with this connector.<br><br> """,
    tags=[
        'bank_connector_management',
        'connector_data_management',
        'provider_data_management',
    ],
)
def get_providers__id_connector_logos_thumbnail(
    id_connector: int, expand: Optional[str] = None
):
    """
    Get all links to the files associated with this connector.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/{id_connector}/sources',
    tags=[
        'bank_connector_management',
        'connector_data_management',
        'provider_data_management',
    ],
)
def get_providers__id_connector_sources(
    id_connector: int, expand: Optional[str] = None
):
    """
    Get list of connector sources
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/{id_connector}/sources/{id_connector_source}/fields',
    tags=[
        'bank_connector_management',
        'provider_data_management',
        'connector_data_management',
    ],
)
def get_providers__id_connector_sources__id_connector_source_fields(
    id_connector: int, id_connector_source: int = ..., expand: Optional[str] = None
):
    """
    Get fields specific to a domain and a source
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/{id_connector}/sources/{id_source}',
    tags=[
        'bank_connector_management',
        'connector_data_management',
        'provider_data_management',
    ],
)
def get_providers__id_connector_sources__id_source(
    id_connector: int, id_source: int = ..., expand: Optional[str] = None
):
    """
    Get the connector source
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/{id_provider}',
    tags=[
        'bank_connector_management',
        'connector_data_management',
        'provider_data_management',
    ],
)
def get_providers__id_provider(id_provider: int, expand: Optional[str] = None):
    """
    Get a connector
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/psd2-registrations', tags=['psd2_registration_management'])
def get_psd2_registrations(expand: Optional[str] = None):
    """
    Get details on all psd2 registrations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/psd2-registrations/{id_psd2-registration}',
    tags=['psd2_registration_management', 'client_data_management'],
)
def get_psd2_registrations__id_psd2_registration(
    id_psd2_registration: int = Path(..., alias='id_psd2-registration'),
    expand: Optional[str] = None,
):
    """
    Get details for a given psd2 registration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/psd2-registrations/{id_psd2registration}/logs',
    description=""" Get logs of psd2 registration. By default, it selects logs for the last month. You can use "min_date" and "max_date" to change boundary dates.<br><br> """,
    tags=[
        'psd2_registration_management',
        'logging_management',
        'connection_log_management',
    ],
)
def get_psd2_registrations__id_psd2registration_logs(
    id_psd2registration: int,
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    min_date: Optional[date_aliased] = None,
    max_date: Optional[date_aliased] = None,
    expand: Optional[str] = None,
):
    """
    Get psd2 registration logs.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/publickey', tags=['encryption_key_management', 'api_configuration_management']
)
def get_publickey():
    """
    Get public encryption key of the API.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/test/sync',
    description=""" It can be used to test receiving data on your webhooks.<br><br> """,
    tags=['synchronization_testing', 'connection_log_management'],
)
def post_test_sync():
    """
    Test synchronization on a random connection.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/test/webhooks',
    description=""" It can be used to test receiving data on your webhooks.<br><br> """,
    tags=['synchronization_testing', 'connection_log_management'],
)
def post_test_webhooks():
    """
    Test synchronization on a random connection.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users',
    tags=['user_data_management', 'user_profile_handling', 'user_account_operations'],
)
def get_users(search: Optional[str] = None, expand: Optional[str] = None):
    """
    Get users
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/users/{id_user}',
    description=""" This endpoint deletes the user.<br><br> """,
    tags=['user_data_management', 'user_account_operations'],
)
def delete_users__id_user(id_user: str, expand: Optional[str] = None):
    """
    Delete the user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/users/{id_user}', tags=['user_data_management', 'user_profile_handling'])
def get_users__id_user(id_user: str, expand: Optional[str] = None):
    """
    Get a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{id_user}/account_types',
    tags=['account_type_management', 'user_account_operations'],
)
def get_users__id_user_account_types(id_user: str, expand: Optional[str] = None):
    """
    Get account types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{id_user}/account_types/{id_account_type}',
    tags=['account_type_management', 'user_account_operations'],
)
def get_users__id_user_account_types__id_account_type(
    id_user: str, id_account_type: int = ..., expand: Optional[str] = None
):
    """
    Get an account type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{id_user}/accounts/{id_account}/categories',
    description=""" Ressource to get categories for the user's transactions<br><br> """,
    tags=['category_management', 'user_defined_category_management'],
)
def get_users__id_user_accounts__id_account_categories(
    id_user: str, id_account: int = ...
):
    """
    Get the category
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{id_user}/accounts/{id_account}/transactionsclusters',
    tags=[
        'transaction_clustering_operations',
        'clustered_transaction_operations',
        'user_transaction_clustering_operations',
    ],
)
def get_users__id_user_accounts__id_account_transactionsclusters(
    id_user: str, id_account: int = ..., expand: Optional[str] = None
):
    """
    Get clustered transactions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/users/{id_user}/accounts/{id_account}/transactionsclusters',
    description=""" Form params : - next_date (date) required: Date of transaction - mean_amount (decimal) required: Mean Amount - wording (string) required: name of transaction - id_account (id) required: related account<br><br> """,
    tags=[
        'transaction_clustering_operations',
        'clustered_transaction_operations',
        'user_transaction_clustering_operations',
    ],
)
def post_users__id_user_accounts__id_account_transactionsclusters(
    id_user: str, id_account: int = ..., expand: Optional[str] = None
):
    """
    Create clustered transaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/users/{id_user}/accounts/{id_account}/transactionsclusters/{id_transactionscluster}',
    tags=[
        'transaction_clustering_operations',
        'clustered_transaction_operations',
        'user_transaction_clustering_operations',
    ],
)
def delete_clustered_transaction(
    id_user: str,
    id_account: int = ...,
    id_transactionscluster: int = ...,
    expand: Optional[str] = None,
):
    """
    Delete a clustered transaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/users/{id_user}/accounts/{id_account}/transactionsclusters/{id_transactionscluster}',
    description=""" Form params : - next_date (date): Date of transaction - mean_amount (decimal): Mean Amount - wording (string): name of transaction - id_account (id): related account - id_category (id): related category - enabled (bool): is enabled<br><br> """,
    tags=[
        'transaction_clustering_operations',
        'clustered_transaction_operations',
        'user_transaction_clustering_operations',
    ],
)
def edit_clustered_transaction(
    id_user: str,
    id_account: int = ...,
    id_transactionscluster: int = ...,
    expand: Optional[str] = None,
):
    """
    Edit a clustered transaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{id_user}/alerts',
    tags=[
        'user_data_management',
        'user_account_operations',
        'user_transaction_management',
    ],
)
def get_users__id_user_alerts(id_user: str, expand: Optional[str] = None):
    """
    Get alerts
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{id_user}/categories',
    description=""" Ressource to get categories for the user's transactions<br><br> """,
    tags=[
        'category_management',
        'user_data_management',
        'user_defined_category_management',
    ],
)
def get_users__id_user_categories(id_user: str):
    """
    Get the category
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{id_user}/categories/full',
    description=""" Ressource to get categories<br><br> """,
    tags=['category_management', 'user_defined_category_management'],
)
def get_users__id_user_categories_full(id_user: str, expand: Optional[str] = None):
    """
    Get the category
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/users/{id_user}/categories/full',
    tags=['category_management', 'user_defined_category_management'],
)
def post_users__id_user_categories_full(
    id_user: str, expand: Optional[str] = None, file: UploadFile = ...
):
    """
    Create a new transaction category
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/users/{id_user}/categories/full/{id_full}',
    tags=['category_management', 'user_defined_category_management'],
)
def delete_users__id_user_categories_full__id_full(
    id_user: str, id_full: int = ..., expand: Optional[str] = None
):
    """
    Delete a user-created transaction category
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/users/{id_user}/categories/full/{id_full}',
    tags=['category_management', 'user_defined_category_management'],
)
def put_users__id_user_categories_full__id_full(
    id_user: str,
    id_full: int = ...,
    expand: Optional[str] = None,
    file: UploadFile = ...,
):
    """
    Modify a user-created category
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/users/{id_user}/config',
    description=""" - keys (string): list of coma separated keys to be deleted.<br><br> """,
    tags=[
        'user_specific_configuration_management',
        'user_data_management',
        'client_data_management',
    ],
)
def delete_users__id_user_config(id_user: str):
    """
    Delete the given user configurations. deletions on keys prefixed by 'biapi.' (except callback_url) are ignored
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{id_user}/config',
    description=""" <br><br> """,
    tags=[
        'user_data_management',
        'user_profile_handling',
        'user_specific_configuration_management',
    ],
)
def get_users__id_user_config(id_user: str):
    """
    Get configuration of a user.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/users/{id_user}/config',
    tags=['user_specific_configuration_management', 'user_data_management'],
)
def post_users__id_user_config(id_user: str):
    """
    Change configuration of a user. modifications on keys prefixed by 'biapi.' (except callback_url) are ignored
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/users/{id_user}/connections',
    tags=['user_connection_data_management', 'connection_log_management'],
)
def delete_users__id_user_connections(id_user: str, expand: Optional[str] = None):
    """
    Delete all connections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{id_user}/connections',
    tags=['user_connection_data_management', 'connection_log_management'],
)
def get_users__id_user_connections(id_user: str, expand: Optional[str] = None):
    """
    Get connections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/users/{id_user}/connections',
    description=""" Create a new connection to a given bank or provider. You have to give all needed parameters (use /banks/ID/fields or /providers/ID/fields to get them).<br><br> """,
    tags=['connection_log_management', 'user_connection_data_management'],
)
def post_users__id_user_connections(
    id_user: str,
    source: Optional[str] = None,
    expand: Optional[str] = None,
    file: UploadFile = ...,
):
    """
    Add a new connection.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/users/{id_user}/connections/{id_connection}',
    description=""" This endpoint deletes a connection and all related accounts and transactions.<br><br> """,
    tags=[
        'user_connection_data_management',
        'user_data_management',
        'connection_log_management',
    ],
)
def delete_users__id_user_connections__id_connection(
    id_user: str, id_connection: int = ..., expand: Optional[str] = None
):
    """
    Delete a connection.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/users/{id_user}/connections/{id_connection}',
    description=""" Give new parameters to change on the configuration of this connection (for example "password").<br><br>It tests connection to website, and if it fails, a 400 response is given with the error code "wrongpass" or "websiteUnavailable".<br><br>You can also supply meta-parameters on connection, like 'active' or 'expire'.<br><br>It's possible to execute the update/synchronization in the background with a query parameter. If done in background this endpoint will respond with data that is not yet updated. To obtain updated data, polling is required as the the data will be filled in the background.<br><br> """,
    tags=[
        'user_connection_data_management',
        'connection_log_management',
        'client_data_management',
    ],
)
def post_users__id_user_connections__id_connection(
    id_user: str,
    id_connection: int = ...,
    background: Optional[bool] = None,
    psu_requested: Optional[bool] = None,
    refresh_psd2_auth: Optional[bool] = None,
    expand: Optional[str] = None,
    file: UploadFile = ...,
):
    """
    Update a connection.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/users/{id_user}/connections/{id_connection}',
    description=""" We suggest to pass parameter expand=accounts[transactions] to get all *new* and *updated* transactions.<br><br> """,
    tags=[
        'synchronization_testing',
        'connection_log_management',
        'user_connection_data_management',
    ],
)
def put_users__id_user_connections__id_connection(
    id_user: str,
    id_connection: int = ...,
    last_update: Optional[datetime_aliased] = None,
    background: Optional[bool] = None,
    psu_requested: Optional[bool] = None,
    expand: Optional[str] = None,
):
    """
    Force synchronisation of a connection.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/users/{id_user}/connections/{id_connection}/accounts',
    tags=['user_account_operations', 'client_data_management', 'user_data_management'],
)
def delete_users__id_user_connections__id_connection_accounts(
    id_user: str, id_connection: int = ..., expand: Optional[str] = None
):
    """
    Delete all accounts
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{id_user}/connections/{id_connection}/accounts',
    tags=['user_account_operations', 'user_data_management'],
)
def get_users__id_user_connections__id_connection_accounts(
    id_user: str, id_connection: int = ..., expand: Optional[str] = None
):
    """
    Get accounts list.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/users/{id_user}/connections/{id_connection}/accounts',
    description=""" This endpoint creates an account related to a connection or not.<br><br> """,
    tags=['user_account_operations', 'user_data_management', 'user_authentication'],
)
def post_users__id_user_connections__id_connection_accounts(
    id_user: str,
    id_connection: int = ...,
    expand: Optional[str] = None,
    file: UploadFile = ...,
):
    """
    Create an account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/users/{id_user}/connections/{id_connection}/accounts',
    tags=['user_account_operations', 'client_data_management', 'user_data_management'],
)
def put_users__id_user_connections__id_connection_accounts(
    id_user: str, id_connection: int = ..., expand: Optional[str] = None
):
    """
    Update many accounts at once
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/users/{id_user}/connections/{id_connection}/accounts/{id_account}',
    description=""" It deletes a specific account.<br><br> """,
    tags=['user_data_management', 'user_account_operations'],
)
def delete_account(
    id_user: str,
    id_connection: int = ...,
    id_account: int = ...,
    expand: Optional[str] = None,
):
    """
    Delete an account.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/users/{id_user}/connections/{id_connection}/accounts/{id_account}',
    description=""" It updates a specific account<br><br> """,
    tags=['client_data_management', 'user_account_operations', 'user_data_management'],
)
def update_user_account_connection(
    id_user: str,
    id_connection: int = ...,
    id_account: int = ...,
    expand: Optional[str] = None,
    file: UploadFile = ...,
):
    """
    Update an account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/categories',
    description=""" Ressource to get categories for the user's transactions<br><br> """,
    tags=['category_management', 'user_data_management', 'user_account_operations'],
)
def get_user_connection_account_category(
    id_user: str, id_connection: int = ..., id_account: int = ...
):
    """
    Get the category
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/delta',
    description=""" Get account delta between sums of transactions and difference of account balance for the given period.<br><br> """,
    tags=[
        'user_account_operations',
        'user_transaction_management',
        'transaction_metadata_management',
    ],
)
def get_account_deltas(
    id_user: str,
    id_connection: int = ...,
    id_account: int = ...,
    min_date: Optional[date_aliased] = None,
    max_date: Optional[date_aliased] = None,
    period: Optional[str] = None,
):
    """
    Get deltas of accounts
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/logs',
    description=""" Get logs of account. By default, it selects logs for the last month. You can use "min_date" and "max_date" to change boundary dates.<br><br> """,
    tags=['user_account_operations', 'connection_log_management', 'logging_management'],
)
def get_account_logs(
    id_user: str,
    id_connection: int = ...,
    id_account: int = ...,
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    min_date: Optional[date_aliased] = None,
    max_date: Optional[date_aliased] = None,
    expand: Optional[str] = None,
):
    """
    Get accounts logs.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/sources',
    tags=[
        'user_account_operations',
        'client_data_management',
        'user_connection_data_management',
    ],
)
def get_account_sources(
    id_user: str,
    id_connection: int = ...,
    id_account: int = ...,
    expand: Optional[str] = None,
):
    """
    Get account sources
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/transactions',
    tags=['client_data_management', 'user_transaction_management'],
)
def delete_user_transactions(
    id_user: str,
    id_connection: int = ...,
    id_account: int = ...,
    expand: Optional[str] = None,
):
    """
    Delete transactions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/transactions',
    description=""" Get list of transactions.<br><br>By default, it selects transactions for the last month. You can use "min_date" and "max_date" to change boundary dates.<br><br> """,
    tags=[
        'user_transaction_management',
        'user_specific_configuration_management',
        'transaction_metadata_management',
    ],
)
def get_user_transactions(
    id_user: str,
    id_connection: int = ...,
    id_account: int = ...,
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    min_date: Optional[date_aliased] = None,
    max_date: Optional[date_aliased] = None,
    income: Optional[bool] = None,
    deleted: Optional[bool] = None,
    all: Optional[bool] = None,
    last_update: Optional[datetime_aliased] = None,
    wording: Optional[str] = None,
    min_value: Optional[float] = None,
    max_value: Optional[float] = None,
    search: Optional[str] = None,
    value: Optional[str] = None,
    id_category: Optional[int] = None,
    expand: Optional[str] = None,
):
    """
    Get transactions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/transactions',
    description=""" Create transactions for the supplied account or the account whose id is given with form parameters. It requires an array of transaction dictionaries.<br><br><br><br> """,
    tags=['user_transaction_management', 'transaction_metadata_management'],
)
def create_user_transaction(
    id_user: str,
    id_connection: int = ...,
    id_account: int = ...,
    expand: Optional[str] = None,
    file: UploadFile = ...,
):
    """
    Create transactions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/transactions/{id_transaction}',
    tags=['transaction_metadata_management', 'user_transaction_management'],
)
def edit_transaction_metadata(
    id_user: str,
    id_connection: int = ...,
    id_account: int = ...,
    id_transaction: int = ...,
    expand: Optional[str] = None,
    file: UploadFile = ...,
):
    """
    Edit a transaction meta-data
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/transactions/{id_transaction}/informations',
    tags=[
        'transaction_key_value_management',
        'user_transaction_management',
        'transaction_metadata_management',
    ],
)
def delete_transaction_key_value_pairs(
    id_user: str,
    id_connection: int = ...,
    id_account: int = ...,
    id_transaction: int = ...,
    expand: Optional[str] = None,
):
    """
    Delete all arbitrary key-value pairs of a transaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/transactions/{id_transaction}/informations',
    tags=['transaction_key_value_management', 'transaction_metadata_management'],
)
def list_transaction_key_value_pairs(
    id_user: str,
    id_connection: int = ...,
    id_account: int = ...,
    id_transaction: int = ...,
    expand: Optional[str] = None,
):
    """
    List all arbitrary key-value pairs on a transaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/transactions/{id_transaction}/informations',
    tags=[
        'transaction_key_value_management',
        'transaction_metadata_management',
        'user_transaction_management',
    ],
)
def add_or_edit_transaction_metadata(
    id_user: str,
    id_connection: int = ...,
    id_account: int = ...,
    id_transaction: int = ...,
    expand: Optional[str] = None,
):
    """
    Add or edit transaction arbitrary key-value pairs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/transactions/{id_transaction}/informations/{id_information}',
    tags=[
        'transaction_key_value_management',
        'transaction_metadata_management',
        'user_transaction_management',
    ],
)
def delete_transaction_information(
    id_user: str,
    id_connection: int = ...,
    id_account: int = ...,
    id_transaction: int = ...,
    id_information: int = ...,
    expand: Optional[str] = None,
):
    """
    Delete a particular key-value pair on a transaction.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/transactions/{id_transaction}/informations/{id_information}',
    tags=['transaction_key_value_management', 'transaction_metadata_management'],
)
def get_transaction_key_value_pair(
    id_user: str,
    id_connection: int = ...,
    id_account: int = ...,
    id_transaction: int = ...,
    id_information: int = ...,
    expand: Optional[str] = None,
):
    """
    Get a particular arbitrary key-value pair on a transaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/transactionsclusters',
    tags=[
        'transaction_clustering_operations',
        'clustered_transaction_operations',
        'user_transaction_clustering_operations',
    ],
)
def get_clustered_transactions(
    id_user: str,
    id_connection: int = ...,
    id_account: int = ...,
    expand: Optional[str] = None,
):
    """
    Get clustered transactions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/transactionsclusters',
    description=""" Form params : - next_date (date) required: Date of transaction - mean_amount (decimal) required: Mean Amount - wording (string) required: name of transaction - id_account (id) required: related account<br><br> """,
    tags=[
        'transaction_clustering_operations',
        'user_transaction_clustering_operations',
        'clustered_transaction_operations',
    ],
)
def create_clustered_transaction(
    id_user: str,
    id_connection: int = ...,
    id_account: int = ...,
    expand: Optional[str] = None,
):
    """
    Create clustered transaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/transactionsclusters/{id_transactionscluster}',
    tags=[
        'transaction_clustering_operations',
        'clustered_transaction_operations',
        'user_transaction_clustering_operations',
    ],
)
def remove_clustered_transaction(
    id_user: str,
    id_connection: int = ...,
    id_account: int = ...,
    id_transactionscluster: int = ...,
    expand: Optional[str] = None,
):
    """
    Delete a clustered transaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/users/{id_user}/connections/{id_connection}/accounts/{id_account}/transactionsclusters/{id_transactionscluster}',
    description=""" Form params : - next_date (date): Date of transaction - mean_amount (decimal): Mean Amount - wording (string): name of transaction - id_account (id): related account - id_category (id): related category - enabled (bool): is enabled<br><br> """,
    tags=[
        'transaction_clustering_operations',
        'user_transaction_clustering_operations',
        'clustered_transaction_operations',
    ],
)
def update_clustered_transaction(
    id_user: str,
    id_connection: int = ...,
    id_account: int = ...,
    id_transactionscluster: int = ...,
    expand: Optional[str] = None,
):
    """
    Edit a clustered transaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{id_user}/connections/{id_connection}/informations',
    description=""" <br><br> """,
    tags=[
        'user_connection_data_management',
        'connection_log_management',
        'user_data_management',
    ],
)
def get_users__id_user_connections__id_connection_informations(
    id_user: str, id_connection: int = ..., expand: Optional[str] = None
):
    """
    Get connection additionnal informations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{id_user}/connections/{id_connection}/logs',
    description=""" Get logs about connections.<br><br> """,
    tags=[
        'connection_log_management',
        'logging_management',
        'user_connection_data_management',
    ],
)
def get_users__id_user_connections__id_connection_logs(
    id_user: Union[str, Optional[int], Optional[int], Optional[int]],
    id_connection: Union[int, Optional[int], Optional[int], Optional[int]] = ...,
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    min_date: Optional[date_aliased] = None,
    max_date: Optional[date_aliased] = None,
    period: Optional[str] = None,
    id_connector: Optional[int] = None,
    connector_uuid: Optional[str] = None,
    error: Optional[str] = None,
    id_source: Optional[int] = None,
    id_max: Optional[int] = None,
    expand: Optional[str] = None,
):
    """
    Get connection logs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{id_user}/connections/{id_connection}/sources',
    tags=[
        'user_connection_data_management',
        'client_data_management',
        'connection_log_management',
    ],
)
def get_users__id_user_connections__id_connection_sources(
    id_user: str, id_connection: int = ..., expand: Optional[str] = None
):
    """
    Get connection sources
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/users/{id_user}/connections/{id_connection}/sources/{id_source}',
    description=""" This will make it so the specified source will not be synchronized anymore.<br><br> """,
    tags=[
        'connection_log_management',
        'user_connection_data_management',
        'user_data_management',
    ],
)
def disable_connection_source(
    id_user: str,
    id_connection: int = ...,
    id_source: int = ...,
    expand: Optional[str] = None,
):
    """
    Disable a connection source
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/users/{id_user}/connections/{id_connection}/sources/{id_source}',
    description=""" This endpoint is used to enable a source or force a synchronization on it.<br><br> """,
    tags=[
        'user_connection_data_management',
        'user_data_management',
        'connection_log_management',
        'user_account_operations',
    ],
)
def post_user_connection_source_info(
    id_user: str,
    id_connection: int = ...,
    id_source: int = ...,
    background: Optional[bool] = None,
    expand: Optional[str] = None,
    file: UploadFile = ...,
):
    """
    "
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/users/{id_user}/connections/{id_connection}/sources/{id_source}',
    description=""" This endpoint is used to enable a source or force a synchronization on it.<br><br> """,
    tags=['connection_log_management', 'user_connection_data_management'],
)
def put_users__id_user_connections__id_connection_sources__id_source(
    id_user: str,
    id_connection: int = ...,
    id_source: int = ...,
    background: Optional[bool] = None,
    expand: Optional[str] = None,
    file: UploadFile = ...,
):
    """
    Update connection source
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{id_user}/connections/{id_connection}/transactionsclusters',
    tags=[
        'transaction_clustering_operations',
        'clustered_transaction_operations',
        'user_transaction_clustering_operations',
    ],
)
def fetch_clustered_transactions(
    id_user: str, id_connection: int = ..., expand: Optional[str] = None
):
    """
    Get clustered transactions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/users/{id_user}/connections/{id_connection}/transactionsclusters',
    description=""" Form params : - next_date (date) required: Date of transaction - mean_amount (decimal) required: Mean Amount - wording (string) required: name of transaction - id_account (id) required: related account<br><br> """,
    tags=[
        'transaction_clustering_operations',
        'clustered_transaction_operations',
        'user_transaction_clustering_operations',
    ],
)
def initiate_clustered_transaction(
    id_user: str, id_connection: int = ..., expand: Optional[str] = None
):
    """
    Create clustered transaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/users/{id_user}/connections/{id_connection}/transactionsclusters/{id_transactionscluster}',
    tags=[
        'transaction_clustering_operations',
        'clustered_transaction_operations',
        'user_transaction_clustering_operations',
    ],
)
def clear_clustered_transaction(
    id_user: str,
    id_connection: int = ...,
    id_transactionscluster: int = ...,
    expand: Optional[str] = None,
):
    """
    Delete a clustered transaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/users/{id_user}/connections/{id_connection}/transactionsclusters/{id_transactionscluster}',
    description=""" Form params : - next_date (date): Date of transaction - mean_amount (decimal): Mean Amount - wording (string): name of transaction - id_account (id): related account - id_category (id): related category - enabled (bool): is enabled<br><br> """,
    tags=[
        'transaction_clustering_operations',
        'clustered_transaction_operations',
        'user_transaction_clustering_operations',
    ],
)
def amend_clustered_transaction(
    id_user: str,
    id_connection: int = ...,
    id_transactionscluster: int = ...,
    expand: Optional[str] = None,
):
    """
    Edit a clustered transaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/users/{id_user}/forecast', tags=['user_forecast_management'])
def get_users__id_user_forecast(id_user: str):
    """
    Get forecast
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{id_user}/logs',
    description=""" Get logs about connections.<br><br> """,
    tags=[
        'connection_log_management',
        'user_connection_data_management',
        'logging_management',
    ],
)
def get_users__id_user_logs(
    id_user: Union[str, Optional[int], Optional[int], Optional[int]],
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    min_date: Optional[date_aliased] = None,
    max_date: Optional[date_aliased] = None,
    period: Optional[str] = None,
    id_connection: Optional[int] = None,
    id_connector: Optional[int] = None,
    connector_uuid: Optional[str] = None,
    error: Optional[str] = None,
    id_source: Optional[int] = None,
    id_max: Optional[int] = None,
    expand: Optional[str] = None,
):
    """
    Get connection logs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{id_user}/profiles',
    tags=['user_profile_handling', 'client_data_management', 'user_data_management'],
)
def get_users__id_user_profiles(id_user: str, expand: Optional[str] = None):
    """
    Get profiles
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{id_user}/profiles/main',
    tags=['user_profile_handling', 'user_data_management'],
)
def get_users__id_user_profiles_main(id_user: str, expand: Optional[str] = None):
    """
    Get the main profile
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{id_user}/profiles/{id_profile}',
    tags=['user_profile_handling', 'client_data_management', 'user_data_management'],
)
def get_users__id_user_profiles__id_profile(
    id_user: str, id_profile: int = ..., expand: Optional[str] = None
):
    """
    Get a profile
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/users/{id_user}/token',
    description=""" Create an access_token for this user and get it.<br><br> """,
    tags=['user_authentication', 'user_auth_token_management'],
)
def post_users__id_user_token(id_user: str, file: UploadFile = ...):
    """
    Create a token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{id_user}/transactionsclusters',
    tags=[
        'transaction_clustering_operations',
        'user_transaction_clustering_operations',
        'clustered_transaction_operations',
    ],
)
def get_users__id_user_transactionsclusters(id_user: str, expand: Optional[str] = None):
    """
    Get clustered transactions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/users/{id_user}/transactionsclusters',
    description=""" Form params : - next_date (date) required: Date of transaction - mean_amount (decimal) required: Mean Amount - wording (string) required: name of transaction - id_account (id) required: related account<br><br> """,
    tags=[
        'transaction_clustering_operations',
        'user_transaction_clustering_operations',
        'clustered_transaction_operations',
    ],
)
def post_users__id_user_transactionsclusters(
    id_user: str, expand: Optional[str] = None
):
    """
    Create clustered transaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/users/{id_user}/transactionsclusters/{id_transactionscluster}',
    tags=[
        'transaction_clustering_operations',
        'clustered_transaction_operations',
        'user_transaction_clustering_operations',
    ],
)
def purge_clustered_transaction(
    id_user: str, id_transactionscluster: int = ..., expand: Optional[str] = None
):
    """
    Delete a clustered transaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/users/{id_user}/transactionsclusters/{id_transactionscluster}',
    description=""" Form params : - next_date (date): Date of transaction - mean_amount (decimal): Mean Amount - wording (string): name of transaction - id_account (id): related account - id_category (id): related category - enabled (bool): is enabled<br><br> """,
    tags=[
        'transaction_clustering_operations',
        'clustered_transaction_operations',
        'user_transaction_clustering_operations',
    ],
)
def put_users__id_user_transactionsclusters__id_transactionscluster(
    id_user: str, id_transactionscluster: int = ..., expand: Optional[str] = None
):
    """
    Edit a clustered transaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/webauth',
    description=""" The route encapsulate 2 functionalities: 1. Create or update a connection through oAuth2 session.<br><br>2. Execute a transfer through OAuth2 session. """,
    tags=['user_authentication', 'user_auth_token_management'],
)
def get_webauth(file: UploadFile):
    """
    First step to establish an oAuth2 connection.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/webhooks',
    description=""" Updates the deleted field with the date of the deletion<br><br> """,
    tags=['webhook_management'],
)
def delete_webhooks(expand: Optional[str] = None):
    """
    Deletes all webhooks
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/webhooks',
    tags=[
        'webhook_management',
        'webhook_data_configuration_management',
        'webhook_activity_log_management',
    ],
)
def get_webhooks(expand: Optional[str] = None):
    """
    Get webhooks
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/webhooks', tags=['webhook_management'])
def post_webhooks(expand: Optional[str] = None, file: UploadFile = ...):
    """
    Adds a new webhook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/webhooks/auth', tags=['webhook_authentication_management', 'webhook_management']
)
def delete_webhooks_auth(expand: Optional[str] = None):
    """
    Deletes all webhook authentication types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/webhooks/auth', tags=['webhook_authentication_management', 'webhook_management']
)
def get_webhooks_auth(expand: Optional[str] = None):
    """
    Get webhooks authentication types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/webhooks/auth', tags=['webhook_authentication_management', 'webhook_management']
)
def post_webhooks_auth(expand: Optional[str] = None, file: UploadFile = ...):
    """
    Adds a new webhook authentication type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/webhooks/auth/{id_auth}',
    description=""" Updates the deleted field with the date of the deletion<br><br> """,
    tags=['webhook_authentication_management', 'webhook_management'],
)
def delete_webhooks_auth__id_auth(id_auth: int, expand: Optional[str] = None):
    """
    Deletes the webhook authentication type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/webhooks/auth/{id_auth}',
    tags=['webhook_authentication_management', 'webhook_management'],
)
def post_webhooks_auth__id_auth(
    id_auth: int, expand: Optional[str] = None, file: UploadFile = ...
):
    """
    Updates the webhook authentication type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/webhooks/auth/{id_auth}',
    tags=['webhook_authentication_management', 'webhook_management'],
)
def put_webhooks_auth__id_auth(
    id_auth: int, expand: Optional[str] = None, file: UploadFile = ...
):
    """
    Updates the webhook authentication type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/webhooks/{id_webhook}',
    description=""" Updates the deleted field with the date of the deletion<br><br> """,
    tags=['webhook_management'],
)
def delete_webhooks__id_webhook(id_webhook: int, expand: Optional[str] = None):
    """
    Deletes a webhook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/webhooks/{id_webhook}',
    tags=['webhook_management', 'webhook_data_configuration_management'],
)
def post_webhooks__id_webhook(
    id_webhook: int, expand: Optional[str] = None, file: UploadFile = ...
):
    """
    Updates a webhook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/webhooks/{id_webhook}',
    tags=['webhook_management', 'webhook_data_configuration_management'],
)
def put_webhooks__id_webhook(
    id_webhook: int, expand: Optional[str] = None, file: UploadFile = ...
):
    """
    Updates a webhook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/webhooks/{id_webhook}/add_to_data',
    tags=['webhook_management', 'user_data_management'],
)
def delete_webhooks__id_webhook_add_to_data(
    id_webhook: int, expand: Optional[str] = None
):
    """
    delete all entries
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/webhooks/{id_webhook}/add_to_data',
    tags=['webhook_management', 'webhook_data_configuration_management'],
)
def get_webhooks__id_webhook_add_to_data(id_webhook: int, expand: Optional[str] = None):
    """
    retrieve the list of the value to add in webhooks when sending the requested webhook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/webhooks/{id_webhook}/add_to_data',
    description=""" For each parameter, a value will be added in the webhook data. Use the key to set the name of the field. The values that can be added are to be found in the user configuration.<br><br> """,
    tags=[
        'user_specific_configuration_management',
        'webhook_management',
        'webhook_data_configuration_management',
    ],
)
def post_webhooks__id_webhook_add_to_data(
    id_webhook: int, expand: Optional[str] = None
):
    """
    Setup a field to store in user config when calling the endpoint
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/webhooks/{id_webhook}/add_to_data/{key}',
    tags=['webhook_management', 'client_data_management'],
)
def delete_webhooks__id_webhook_add_to_data__key(
    id_webhook: int, key: str = ..., expand: Optional[str] = None
):
    """
    delete the requested entry
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/webhooks/{id_webhook}/add_to_data/{key}',
    tags=['webhook_management', 'webhook_data_configuration_management'],
)
def get_webhooks__id_webhook_add_to_data__key(
    id_webhook: int, key: str = ..., expand: Optional[str] = None
):
    """
    retrieve the value to add in the requested webhook for the requested name
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/webhooks/{id_webhook}/add_to_data/{key}',
    description=""" For each parameter, a value will be added in the webhook data. Use the key to set the name of the field. The values that can be added are to be found in the user configuration.<br><br> """,
    tags=[
        'user_specific_configuration_management',
        'webhook_management',
        'webhook_data_configuration_management',
    ],
)
def post_webhooks__id_webhook_add_to_data__key(
    id_webhook: int, key: str = ..., expand: Optional[str] = None
):
    """
    upate the requested field to store in user config when calling the endpoint
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/webhooks/{id_webhook}/logs',
    description=""" Get logs of the webhooks.<br><br>By default, it selects logs for the last month. You can use "min_date" and "max_date" to change boundary dates.<br><br> """,
    tags=[
        'webhook_activity_log_management',
        'logging_management',
        'webhook_management',
    ],
)
def get_webhooks__id_webhook_logs(
    id_webhook: int,
    id_user: Optional[int] = None,
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    min_date: Optional[date_aliased] = None,
    max_date: Optional[date_aliased] = None,
    expand: Optional[str] = None,
):
    """
    Get webhooks logs.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
